define([
	'./Renderers'
], function (Renderers) {

	function StatementsRenderer(program) {
		//	summary:
		//		Constructor for an object that manages the rendering of a list of AST nodes
		//	program:
		//		The list of AST nodes to be rendered

		var i = 0,
			Renderer,
			statement,
			statements = this.statements = [];

		// walk the list of AST nodes and instantiate an appropriate renderer for each node.
		while ((statement = program[i++])) {
			Renderer = Renderers[statement.type];
			if (Renderer) {
				statements.push(new Renderer(statement));
			}
			else {
				console.warn('no renderer for', statement.type, statement);
			}
		}
	}

	StatementsRenderer.prototype = {
		constructor: StatementsRenderer,

		render: function () {
			//	summary:
			//		Invoke the renderers for each of the logic statements associated with this program.
			//	returns: array
			//		The list of output generated by the program

			var statements = this.statements || [],
				output = [],
				i = 0,
				statement;

			while ((statement = statements[i++])) {
				output.push(statement.render.apply(statement, arguments));
			}

			return output;
		},

		unrender: function () {

		},

		destroy: function () {

		}
	};

	return StatementsRenderer;
});