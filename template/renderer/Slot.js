define([
	'./Renderers',
	'dbind/bind',
	'dojo/dom-construct'
], function (Renderers, bind, domConstruct) {

	function SlotRenderer(astNode) {
		//	summary:
		//		Manages the rendering and updating of a Slot
		//	astNode:
		//		The AST node that describes this slot

		this.uid = astNode.uid;
	}

	SlotRenderer.prototype = {
		constructor: SlotRenderer,

		render: function (view, context, template) {
			//	summary:
			//		Render open and close script blocks that are our pseudo range elements.  The
			//		rendering generated by the renderer associated with this slot will be placed
			//		between the open and close script blocks.

			// generate a start and end script block
			var uid = this.uid,
				// find the renderer that occupies this slot
				content = template.root.slots[uid],
				// get the view-specific slot data
				slots = view._slots || (view._slots = {}),
				slot = slots[uid] || (slots[uid] = {}),
				open = slot._openNode,
				close = slot._closeNode,
				frag;

			if (!open) {
				frag = domConstruct.toDom('<script data-uid="' + uid + '-open"></script><script data-uid="' + uid + '-close"></script>');
				// stash the script nodes for this slot on the view so we can retrieve as needed
				slot._openNode = open = frag.firstChild;
				slot._closeNode = close = frag.lastChild;
			}

			// render the content into this slot
			return bind.when(content.render.apply(content, arguments), function (nodes) {
				var parent = open.parentNode,
					i = 0,
					length = nodes && nodes.length;

				if (length) {
					while ((i < length) && parent) {
						// since the closing tag is a known reference point, start at the beginning
						// of the list of nodes and insert each one before the close script.
						parent.insertBefore(nodes[i++], close);
					}
				}
				else {
					// TODO: should we be doing this every time? even when we have nodes to add?
					while (open.nextSibling !== close && parent) {
						// TODO: should we empty the removed node?
						parent.removeChild(open.nextSibling);
					}
				}

				return parent;
			});
		},

		unrender: function (node) {
			// TODO:
			// find our script tags (by data-uid) and clean up
		},

		destroy: function () {
			// TODO:
		}
	};

	return SlotRenderer;
});