define([], function () {
  /*
   * Generated by PEG.js 0.7.0.
   *
   * http://pegjs.majda.cz/
   */
  
  function quote(s) {
    /*
     * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
     * string literal except for the closing quote character, backslash,
     * carriage return, line separator, paragraph separator, and line feed.
     * Any character may appear in the form of an escape sequence.
     *
     * For portability, we also escape escape all control and non-ASCII
     * characters. Note that "\0" and "\v" escape sequences are not used
     * because JSHint does not like the first and IE the second.
     */
     return '"' + s
      .replace(/\\/g, '\\\\')  // backslash
      .replace(/"/g, '\\"')    // closing quote character
      .replace(/\x08/g, '\\b') // backspace
      .replace(/\t/g, '\\t')   // horizontal tab
      .replace(/\n/g, '\\n')   // line feed
      .replace(/\f/g, '\\f')   // form feed
      .replace(/\r/g, '\\r')   // carriage return
      .replace(/[\x00-\x07\x0B\x0E-\x1F\x80-\uFFFF]/g, escape)
      + '"';
  }
  
  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
     */
    parse: function(input, startRule) {
      var parseFunctions = {
        "Template": parse_Template,
        "Node": parse_Node,
        "OutputNode": parse_OutputNode,
        "BlockNode": parse_BlockNode,
        "RawNode": parse_RawNode,
        "IfBlock": parse_IfBlock,
        "ElseIfBlock": parse_ElseIfBlock,
        "ElseBlock": parse_ElseBlock,
        "ForBlock": parse_ForBlock,
        "WhenBlock": parse_WhenBlock,
        "WhenErrorBlock": parse_WhenErrorBlock,
        "WhenAsIdentifier": parse_WhenAsIdentifier,
        "WhenProgressBlock": parse_WhenProgressBlock,
        "PlaceholderBlock": parse_PlaceholderBlock,
        "PlaceholderIdentifier": parse_PlaceholderIdentifier,
        "Arguments": parse_Arguments,
        "Argument": parse_Argument,
        "Expression": parse_Expression,
        "Variable": parse_Variable,
        "ReferenceVariable": parse_ReferenceVariable,
        "ArrayAccessor": parse_ArrayAccessor,
        "DotAccessor": parse_DotAccessor,
        "CallVariable": parse_CallVariable,
        "Identifier": parse_Identifier,
        "String": parse_String,
        "Number": parse_Number,
        "DecimalNumber": parse_DecimalNumber,
        "ExponentialNumber": parse_ExponentialNumber,
        "HexadecimalNumber": parse_HexadecimalNumber,
        "Boolean": parse_Boolean,
        "Null": parse_Null,
        "Undefined": parse_Undefined,
        "Object": parse_Object,
        "RawObject": parse_RawObject,
        "OpenToken": parse_OpenToken,
        "CloseToken": parse_CloseToken,
        "S": parse_S
      };
      
      if (startRule !== undefined) {
        if (parseFunctions[startRule] === undefined) {
          throw new Error("Invalid rule name: " + quote(startRule) + ".");
        }
      } else {
        startRule = "Template";
      }
      
      var pos = { offset: 0, line: 1, column: 1, seenCR: false };
      var reportFailures = 0;
      var rightmostFailuresPos = { offset: 0, line: 1, column: 1, seenCR: false };
      var rightmostFailuresExpected = [];
      
      function padLeft(input, padding, length) {
        var result = input;
        
        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }
        
        return result;
      }
      
      function escape(ch) {
        var charCode = ch.charCodeAt(0);
        var escapeChar;
        var length;
        
        if (charCode <= 0xFF) {
          escapeChar = 'x';
          length = 2;
        } else {
          escapeChar = 'u';
          length = 4;
        }
        
        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }
      
      function clone(object) {
        var result = {};
        for (var key in object) {
          result[key] = object[key];
        }
        return result;
      }
      
      function advance(pos, n) {
        var endOffset = pos.offset + n;
        
        for (var offset = pos.offset; offset < endOffset; offset++) {
          var ch = input.charAt(offset);
          if (ch === "\n") {
            if (!pos.seenCR) { pos.line++; }
            pos.column = 1;
            pos.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            pos.line++;
            pos.column = 1;
            pos.seenCR = true;
          } else {
            pos.column++;
            pos.seenCR = false;
          }
        }
        
        pos.offset += n;
      }
      
      function matchFailed(failure) {
        if (pos.offset < rightmostFailuresPos.offset) {
          return;
        }
        
        if (pos.offset > rightmostFailuresPos.offset) {
          rightmostFailuresPos = clone(pos);
          rightmostFailuresExpected = [];
        }
        
        rightmostFailuresExpected.push(failure);
      }
      
      function parse_Template() {
        var result0, result1;
        
        result0 = [];
        result1 = parse_Node();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_Node();
        }
        return result0;
      }
      
      function parse_Node() {
        var result0;
        
        result0 = parse_OutputNode();
        if (result0 === null) {
          result0 = parse_BlockNode();
          if (result0 === null) {
            result0 = parse_RawNode();
          }
        }
        return result0;
      }
      
      function parse_OutputNode() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_OpenToken();
        if (result0 !== null) {
          if (input.charCodeAt(pos.offset) === 61) {
            result1 = "=";
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"=\"");
            }
          }
          if (result1 !== null) {
            result2 = [];
            result3 = parse_S();
            while (result3 !== null) {
              result2.push(result3);
              result3 = parse_S();
            }
            if (result2 !== null) {
              result3 = parse_Variable();
              if (result3 !== null) {
                result4 = [];
                result5 = parse_S();
                while (result5 !== null) {
                  result4.push(result5);
                  result5 = parse_S();
                }
                if (result4 !== null) {
                  result5 = parse_CloseToken();
                  if (result5 !== null) {
                    result0 = [result0, result1, result2, result3, result4, result5];
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, variable) {
        		return {
        			type: 'output',
        			variable: variable
        		};
        	})(pos0.offset, pos0.line, pos0.column, result0[3]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_BlockNode() {
        var result0;
        
        result0 = parse_IfBlock();
        if (result0 === null) {
          result0 = parse_ForBlock();
          if (result0 === null) {
            result0 = parse_WhenBlock();
            if (result0 === null) {
              result0 = parse_PlaceholderBlock();
            }
          }
        }
        return result0;
      }
      
      function parse_RawNode() {
        var result0, result1, result2;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 3) === "\\{%") {
          result1 = "\\{%";
          advance(pos, 3);
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\\\{%\"");
          }
        }
        if (result1 !== null) {
          result1 = (function(offset, line, column) { return '\x7b%'; })(pos1.offset, pos1.line, pos1.column);
        }
        if (result1 === null) {
          pos = clone(pos1);
        }
        if (result1 === null) {
          pos1 = clone(pos);
          if (input.charCodeAt(pos.offset) === 123) {
            result1 = "{";
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"{\"");
            }
          }
          if (result1 !== null) {
            pos2 = clone(pos);
            reportFailures++;
            if (input.charCodeAt(pos.offset) === 37) {
              result2 = "%";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"%\"");
              }
            }
            reportFailures--;
            if (result2 === null) {
              result2 = "";
            } else {
              result2 = null;
              pos = clone(pos2);
            }
            if (result2 !== null) {
              result1 = [result1, result2];
            } else {
              result1 = null;
              pos = clone(pos1);
            }
          } else {
            result1 = null;
            pos = clone(pos1);
          }
          if (result1 === null) {
            if (/^[^{]/.test(input.charAt(pos.offset))) {
              result1 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("[^{]");
              }
            }
          }
        }
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            pos1 = clone(pos);
            if (input.substr(pos.offset, 3) === "\\{%") {
              result1 = "\\{%";
              advance(pos, 3);
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("\"\\\\{%\"");
              }
            }
            if (result1 !== null) {
              result1 = (function(offset, line, column) { return '\x7b%'; })(pos1.offset, pos1.line, pos1.column);
            }
            if (result1 === null) {
              pos = clone(pos1);
            }
            if (result1 === null) {
              pos1 = clone(pos);
              if (input.charCodeAt(pos.offset) === 123) {
                result1 = "{";
                advance(pos, 1);
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed("\"{\"");
                }
              }
              if (result1 !== null) {
                pos2 = clone(pos);
                reportFailures++;
                if (input.charCodeAt(pos.offset) === 37) {
                  result2 = "%";
                  advance(pos, 1);
                } else {
                  result2 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"%\"");
                  }
                }
                reportFailures--;
                if (result2 === null) {
                  result2 = "";
                } else {
                  result2 = null;
                  pos = clone(pos2);
                }
                if (result2 !== null) {
                  result1 = [result1, result2];
                } else {
                  result1 = null;
                  pos = clone(pos1);
                }
              } else {
                result1 = null;
                pos = clone(pos1);
              }
              if (result1 === null) {
                if (/^[^{]/.test(input.charAt(pos.offset))) {
                  result1 = input.charAt(pos.offset);
                  advance(pos, 1);
                } else {
                  result1 = null;
                  if (reportFailures === 0) {
                    matchFailed("[^{]");
                  }
                }
              }
            }
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, raw) {
        		return { type: 'raw', value: flatten(raw) };
        	})(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_IfBlock() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13, result14;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_OpenToken();
        if (result0 !== null) {
          result1 = [];
          result2 = parse_S();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_S();
          }
          if (result1 !== null) {
            if (input.substr(pos.offset, 2) === "if") {
              result2 = "if";
              advance(pos, 2);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"if\"");
              }
            }
            if (result2 !== null) {
              result4 = parse_S();
              if (result4 !== null) {
                result3 = [];
                while (result4 !== null) {
                  result3.push(result4);
                  result4 = parse_S();
                }
              } else {
                result3 = null;
              }
              if (result3 !== null) {
                result4 = parse_ReferenceVariable();
                if (result4 !== null) {
                  result5 = [];
                  result6 = parse_S();
                  while (result6 !== null) {
                    result5.push(result6);
                    result6 = parse_S();
                  }
                  if (result5 !== null) {
                    result6 = parse_CloseToken();
                    if (result6 !== null) {
                      result7 = [];
                      result8 = parse_Node();
                      while (result8 !== null) {
                        result7.push(result8);
                        result8 = parse_Node();
                      }
                      if (result7 !== null) {
                        result8 = [];
                        result9 = parse_ElseIfBlock();
                        while (result9 !== null) {
                          result8.push(result9);
                          result9 = parse_ElseIfBlock();
                        }
                        if (result8 !== null) {
                          result9 = parse_ElseBlock();
                          result9 = result9 !== null ? result9 : "";
                          if (result9 !== null) {
                            result10 = parse_OpenToken();
                            if (result10 !== null) {
                              result11 = [];
                              result12 = parse_S();
                              while (result12 !== null) {
                                result11.push(result12);
                                result12 = parse_S();
                              }
                              if (result11 !== null) {
                                if (input.substr(pos.offset, 5) === "endif") {
                                  result12 = "endif";
                                  advance(pos, 5);
                                } else {
                                  result12 = null;
                                  if (reportFailures === 0) {
                                    matchFailed("\"endif\"");
                                  }
                                }
                                if (result12 !== null) {
                                  result13 = [];
                                  result14 = parse_S();
                                  while (result14 !== null) {
                                    result13.push(result14);
                                    result14 = parse_S();
                                  }
                                  if (result13 !== null) {
                                    result14 = parse_CloseToken();
                                    if (result14 !== null) {
                                      result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13, result14];
                                    } else {
                                      result0 = null;
                                      pos = clone(pos1);
                                    }
                                  } else {
                                    result0 = null;
                                    pos = clone(pos1);
                                  }
                                } else {
                                  result0 = null;
                                  pos = clone(pos1);
                                }
                              } else {
                                result0 = null;
                                pos = clone(pos1);
                              }
                            } else {
                              result0 = null;
                              pos = clone(pos1);
                            }
                          } else {
                            result0 = null;
                            pos = clone(pos1);
                          }
                        } else {
                          result0 = null;
                          pos = clone(pos1);
                        }
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, condition, consequent, alternates, final) {
        		return {
        			type: 'if',
        			conditions: [ { condition: condition, consequent: consequent } ].concat(alternates),
        			alternate: final || []
        		};
        	})(pos0.offset, pos0.line, pos0.column, result0[4], result0[7], result0[8], result0[9]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_ElseIfBlock() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_OpenToken();
        if (result0 !== null) {
          result1 = [];
          result2 = parse_S();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_S();
          }
          if (result1 !== null) {
            if (input.substr(pos.offset, 4) === "else") {
              result2 = "else";
              advance(pos, 4);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"else\"");
              }
            }
            if (result2 !== null) {
              result4 = parse_S();
              if (result4 !== null) {
                result3 = [];
                while (result4 !== null) {
                  result3.push(result4);
                  result4 = parse_S();
                }
              } else {
                result3 = null;
              }
              if (result3 !== null) {
                if (input.substr(pos.offset, 2) === "if") {
                  result4 = "if";
                  advance(pos, 2);
                } else {
                  result4 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"if\"");
                  }
                }
                if (result4 !== null) {
                  result6 = parse_S();
                  if (result6 !== null) {
                    result5 = [];
                    while (result6 !== null) {
                      result5.push(result6);
                      result6 = parse_S();
                    }
                  } else {
                    result5 = null;
                  }
                  if (result5 !== null) {
                    result6 = parse_ReferenceVariable();
                    if (result6 !== null) {
                      result7 = [];
                      result8 = parse_S();
                      while (result8 !== null) {
                        result7.push(result8);
                        result8 = parse_S();
                      }
                      if (result7 !== null) {
                        result8 = parse_CloseToken();
                        if (result8 !== null) {
                          result9 = [];
                          result10 = parse_Node();
                          while (result10 !== null) {
                            result9.push(result10);
                            result10 = parse_Node();
                          }
                          if (result9 !== null) {
                            result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9];
                          } else {
                            result0 = null;
                            pos = clone(pos1);
                          }
                        } else {
                          result0 = null;
                          pos = clone(pos1);
                        }
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, condition, consequent) {
        		return {
        			condition: condition,
        			consequent: consequent
        		};
        	})(pos0.offset, pos0.line, pos0.column, result0[6], result0[9]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_ElseBlock() {
        var result0, result1, result2, result3, result4, result5, result6;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_OpenToken();
        if (result0 !== null) {
          result1 = [];
          result2 = parse_S();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_S();
          }
          if (result1 !== null) {
            if (input.substr(pos.offset, 4) === "else") {
              result2 = "else";
              advance(pos, 4);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"else\"");
              }
            }
            if (result2 !== null) {
              result3 = [];
              result4 = parse_S();
              while (result4 !== null) {
                result3.push(result4);
                result4 = parse_S();
              }
              if (result3 !== null) {
                result4 = parse_CloseToken();
                if (result4 !== null) {
                  result5 = [];
                  result6 = parse_Node();
                  while (result6 !== null) {
                    result5.push(result6);
                    result6 = parse_Node();
                  }
                  if (result5 !== null) {
                    result0 = [result0, result1, result2, result3, result4, result5];
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, consequent) {
        		return consequent;
        	})(pos0.offset, pos0.line, pos0.column, result0[5]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_ForBlock() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13, result14, result15, result16, result17, result18, result19;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_OpenToken();
        if (result0 !== null) {
          result1 = [];
          result2 = parse_S();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_S();
          }
          if (result1 !== null) {
            if (input.substr(pos.offset, 3) === "for") {
              result2 = "for";
              advance(pos, 3);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"for\"");
              }
            }
            if (result2 !== null) {
              result4 = parse_S();
              if (result4 !== null) {
                result3 = [];
                while (result4 !== null) {
                  result3.push(result4);
                  result4 = parse_S();
                }
              } else {
                result3 = null;
              }
              if (result3 !== null) {
                result4 = parse_Identifier();
                if (result4 !== null) {
                  result5 = [];
                  result6 = parse_S();
                  while (result6 !== null) {
                    result5.push(result6);
                    result6 = parse_S();
                  }
                  if (result5 !== null) {
                    if (input.charCodeAt(pos.offset) === 44) {
                      result6 = ",";
                      advance(pos, 1);
                    } else {
                      result6 = null;
                      if (reportFailures === 0) {
                        matchFailed("\",\"");
                      }
                    }
                    if (result6 !== null) {
                      result7 = [];
                      result8 = parse_S();
                      while (result8 !== null) {
                        result7.push(result8);
                        result8 = parse_S();
                      }
                      if (result7 !== null) {
                        result8 = parse_Identifier();
                        if (result8 !== null) {
                          result10 = parse_S();
                          if (result10 !== null) {
                            result9 = [];
                            while (result10 !== null) {
                              result9.push(result10);
                              result10 = parse_S();
                            }
                          } else {
                            result9 = null;
                          }
                          if (result9 !== null) {
                            if (input.substr(pos.offset, 2) === "in") {
                              result10 = "in";
                              advance(pos, 2);
                            } else {
                              result10 = null;
                              if (reportFailures === 0) {
                                matchFailed("\"in\"");
                              }
                            }
                            if (result10 !== null) {
                              result12 = parse_S();
                              if (result12 !== null) {
                                result11 = [];
                                while (result12 !== null) {
                                  result11.push(result12);
                                  result12 = parse_S();
                                }
                              } else {
                                result11 = null;
                              }
                              if (result11 !== null) {
                                result12 = parse_ReferenceVariable();
                                if (result12 !== null) {
                                  result13 = parse_CloseToken();
                                  if (result13 !== null) {
                                    result14 = [];
                                    result15 = parse_Node();
                                    while (result15 !== null) {
                                      result14.push(result15);
                                      result15 = parse_Node();
                                    }
                                    if (result14 !== null) {
                                      result15 = parse_OpenToken();
                                      if (result15 !== null) {
                                        result16 = [];
                                        result17 = parse_S();
                                        while (result17 !== null) {
                                          result16.push(result17);
                                          result17 = parse_S();
                                        }
                                        if (result16 !== null) {
                                          if (input.substr(pos.offset, 6) === "endfor") {
                                            result17 = "endfor";
                                            advance(pos, 6);
                                          } else {
                                            result17 = null;
                                            if (reportFailures === 0) {
                                              matchFailed("\"endfor\"");
                                            }
                                          }
                                          if (result17 !== null) {
                                            result18 = [];
                                            result19 = parse_S();
                                            while (result19 !== null) {
                                              result18.push(result19);
                                              result19 = parse_S();
                                            }
                                            if (result18 !== null) {
                                              result19 = parse_CloseToken();
                                              if (result19 !== null) {
                                                result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13, result14, result15, result16, result17, result18, result19];
                                              } else {
                                                result0 = null;
                                                pos = clone(pos1);
                                              }
                                            } else {
                                              result0 = null;
                                              pos = clone(pos1);
                                            }
                                          } else {
                                            result0 = null;
                                            pos = clone(pos1);
                                          }
                                        } else {
                                          result0 = null;
                                          pos = clone(pos1);
                                        }
                                      } else {
                                        result0 = null;
                                        pos = clone(pos1);
                                      }
                                    } else {
                                      result0 = null;
                                      pos = clone(pos1);
                                    }
                                  } else {
                                    result0 = null;
                                    pos = clone(pos1);
                                  }
                                } else {
                                  result0 = null;
                                  pos = clone(pos1);
                                }
                              } else {
                                result0 = null;
                                pos = clone(pos1);
                              }
                            } else {
                              result0 = null;
                              pos = clone(pos1);
                            }
                          } else {
                            result0 = null;
                            pos = clone(pos1);
                          }
                        } else {
                          result0 = null;
                          pos = clone(pos1);
                        }
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, keyIdentifier, valueIdentifier, objectIdentifier, body) {
        		return {
        			type: 'for',
        			keyIdentifier: keyIdentifier,
        			valueIdentifier: valueIdentifier,
        			objectIdentifier: objectIdentifier
        		};
        	})(pos0.offset, pos0.line, pos0.column, result0[4], result0[8], result0[12], result0[14]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          result0 = parse_OpenToken();
          if (result0 !== null) {
            result1 = [];
            result2 = parse_S();
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse_S();
            }
            if (result1 !== null) {
              if (input.substr(pos.offset, 3) === "for") {
                result2 = "for";
                advance(pos, 3);
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\"for\"");
                }
              }
              if (result2 !== null) {
                result4 = parse_S();
                if (result4 !== null) {
                  result3 = [];
                  while (result4 !== null) {
                    result3.push(result4);
                    result4 = parse_S();
                  }
                } else {
                  result3 = null;
                }
                if (result3 !== null) {
                  result4 = parse_Identifier();
                  if (result4 !== null) {
                    result6 = parse_S();
                    if (result6 !== null) {
                      result5 = [];
                      while (result6 !== null) {
                        result5.push(result6);
                        result6 = parse_S();
                      }
                    } else {
                      result5 = null;
                    }
                    if (result5 !== null) {
                      if (input.substr(pos.offset, 2) === "in") {
                        result6 = "in";
                        advance(pos, 2);
                      } else {
                        result6 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"in\"");
                        }
                      }
                      if (result6 !== null) {
                        result8 = parse_S();
                        if (result8 !== null) {
                          result7 = [];
                          while (result8 !== null) {
                            result7.push(result8);
                            result8 = parse_S();
                          }
                        } else {
                          result7 = null;
                        }
                        if (result7 !== null) {
                          result8 = parse_ReferenceVariable();
                          if (result8 !== null) {
                            result9 = parse_CloseToken();
                            if (result9 !== null) {
                              result10 = [];
                              result11 = parse_Node();
                              while (result11 !== null) {
                                result10.push(result11);
                                result11 = parse_Node();
                              }
                              if (result10 !== null) {
                                result11 = parse_OpenToken();
                                if (result11 !== null) {
                                  result12 = [];
                                  result13 = parse_S();
                                  while (result13 !== null) {
                                    result12.push(result13);
                                    result13 = parse_S();
                                  }
                                  if (result12 !== null) {
                                    if (input.substr(pos.offset, 6) === "endfor") {
                                      result13 = "endfor";
                                      advance(pos, 6);
                                    } else {
                                      result13 = null;
                                      if (reportFailures === 0) {
                                        matchFailed("\"endfor\"");
                                      }
                                    }
                                    if (result13 !== null) {
                                      result14 = [];
                                      result15 = parse_S();
                                      while (result15 !== null) {
                                        result14.push(result15);
                                        result15 = parse_S();
                                      }
                                      if (result14 !== null) {
                                        result15 = parse_CloseToken();
                                        if (result15 !== null) {
                                          result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13, result14, result15];
                                        } else {
                                          result0 = null;
                                          pos = clone(pos1);
                                        }
                                      } else {
                                        result0 = null;
                                        pos = clone(pos1);
                                      }
                                    } else {
                                      result0 = null;
                                      pos = clone(pos1);
                                    }
                                  } else {
                                    result0 = null;
                                    pos = clone(pos1);
                                  }
                                } else {
                                  result0 = null;
                                  pos = clone(pos1);
                                }
                              } else {
                                result0 = null;
                                pos = clone(pos1);
                              }
                            } else {
                              result0 = null;
                              pos = clone(pos1);
                            }
                          } else {
                            result0 = null;
                            pos = clone(pos1);
                          }
                        } else {
                          result0 = null;
                          pos = clone(pos1);
                        }
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, valueIdentifier, objectIdentifier, body) {
          		return {
          			type: 'for',
          			valueIdentifier: valueIdentifier,
          			objectIdentifier: objectIdentifier
          		};
          	})(pos0.offset, pos0.line, pos0.column, result0[4], result0[8], result0[10]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        return result0;
      }
      
      function parse_WhenBlock() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13, result14;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_OpenToken();
        if (result0 !== null) {
          result1 = [];
          result2 = parse_S();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_S();
          }
          if (result1 !== null) {
            if (input.substr(pos.offset, 4) === "when") {
              result2 = "when";
              advance(pos, 4);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"when\"");
              }
            }
            if (result2 !== null) {
              result4 = parse_S();
              if (result4 !== null) {
                result3 = [];
                while (result4 !== null) {
                  result3.push(result4);
                  result4 = parse_S();
                }
              } else {
                result3 = null;
              }
              if (result3 !== null) {
                result4 = parse_Variable();
                if (result4 !== null) {
                  result5 = [];
                  result6 = parse_S();
                  while (result6 !== null) {
                    result5.push(result6);
                    result6 = parse_S();
                  }
                  if (result5 !== null) {
                    result6 = parse_CloseToken();
                    if (result6 !== null) {
                      result7 = [];
                      result8 = parse_Node();
                      while (result8 !== null) {
                        result7.push(result8);
                        result8 = parse_Node();
                      }
                      if (result7 !== null) {
                        result8 = parse_WhenErrorBlock();
                        result8 = result8 !== null ? result8 : "";
                        if (result8 !== null) {
                          result9 = parse_WhenProgressBlock();
                          result9 = result9 !== null ? result9 : "";
                          if (result9 !== null) {
                            result10 = parse_OpenToken();
                            if (result10 !== null) {
                              result11 = [];
                              result12 = parse_S();
                              while (result12 !== null) {
                                result11.push(result12);
                                result12 = parse_S();
                              }
                              if (result11 !== null) {
                                if (input.substr(pos.offset, 7) === "endwhen") {
                                  result12 = "endwhen";
                                  advance(pos, 7);
                                } else {
                                  result12 = null;
                                  if (reportFailures === 0) {
                                    matchFailed("\"endwhen\"");
                                  }
                                }
                                if (result12 !== null) {
                                  result13 = [];
                                  result14 = parse_S();
                                  while (result14 !== null) {
                                    result13.push(result14);
                                    result14 = parse_S();
                                  }
                                  if (result13 !== null) {
                                    result14 = parse_CloseToken();
                                    if (result14 !== null) {
                                      result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13, result14];
                                    } else {
                                      result0 = null;
                                      pos = clone(pos1);
                                    }
                                  } else {
                                    result0 = null;
                                    pos = clone(pos1);
                                  }
                                } else {
                                  result0 = null;
                                  pos = clone(pos1);
                                }
                              } else {
                                result0 = null;
                                pos = clone(pos1);
                              }
                            } else {
                              result0 = null;
                              pos = clone(pos1);
                            }
                          } else {
                            result0 = null;
                            pos = clone(pos1);
                          }
                        } else {
                          result0 = null;
                          pos = clone(pos1);
                        }
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, objectIdentifier, success, error, progress) {
        		return {
        			type: 'when',
        			objectIdentifier: objectIdentifier,
        			success: success,
        			error: error,
        			progress: progress
        		};
        	})(pos0.offset, pos0.line, pos0.column, result0[4], result0[7], result0[8], result0[9]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_WhenErrorBlock() {
        var result0, result1, result2, result3, result4, result5, result6, result7;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_OpenToken();
        if (result0 !== null) {
          result1 = [];
          result2 = parse_S();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_S();
          }
          if (result1 !== null) {
            if (input.substr(pos.offset, 5) === "error") {
              result2 = "error";
              advance(pos, 5);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"error\"");
              }
            }
            if (result2 !== null) {
              result3 = parse_WhenAsIdentifier();
              result3 = result3 !== null ? result3 : "";
              if (result3 !== null) {
                result4 = [];
                result5 = parse_S();
                while (result5 !== null) {
                  result4.push(result5);
                  result5 = parse_S();
                }
                if (result4 !== null) {
                  result5 = parse_CloseToken();
                  if (result5 !== null) {
                    result6 = [];
                    result7 = parse_Node();
                    while (result7 !== null) {
                      result6.push(result7);
                      result7 = parse_Node();
                    }
                    if (result6 !== null) {
                      result0 = [result0, result1, result2, result3, result4, result5, result6];
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, errorIdentifier, body) {
        		return {
        			type: 'whenerror',
        			identifier: errorIdentifier || 'error',
        			body: body
        		};
        	})(pos0.offset, pos0.line, pos0.column, result0[3], result0[6]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_WhenAsIdentifier() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result1 = parse_S();
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            result1 = parse_S();
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          if (input.substr(pos.offset, 2) === "as") {
            result1 = "as";
            advance(pos, 2);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"as\"");
            }
          }
          if (result1 !== null) {
            result3 = parse_S();
            if (result3 !== null) {
              result2 = [];
              while (result3 !== null) {
                result2.push(result3);
                result3 = parse_S();
              }
            } else {
              result2 = null;
            }
            if (result2 !== null) {
              result3 = parse_Identifier();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, identifier) {
        		return identifier;
        	})(pos0.offset, pos0.line, pos0.column, result0[3]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_WhenProgressBlock() {
        var result0, result1, result2, result3, result4, result5, result6, result7;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_OpenToken();
        if (result0 !== null) {
          result1 = [];
          result2 = parse_S();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_S();
          }
          if (result1 !== null) {
            if (input.substr(pos.offset, 8) === "progress") {
              result2 = "progress";
              advance(pos, 8);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"progress\"");
              }
            }
            if (result2 !== null) {
              result3 = parse_WhenAsIdentifier();
              result3 = result3 !== null ? result3 : "";
              if (result3 !== null) {
                result4 = [];
                result5 = parse_S();
                while (result5 !== null) {
                  result4.push(result5);
                  result5 = parse_S();
                }
                if (result4 !== null) {
                  result5 = parse_CloseToken();
                  if (result5 !== null) {
                    result6 = [];
                    result7 = parse_Node();
                    while (result7 !== null) {
                      result6.push(result7);
                      result7 = parse_Node();
                    }
                    if (result6 !== null) {
                      result0 = [result0, result1, result2, result3, result4, result5, result6];
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, progressIdentifier, body) {
        		return {
        			type: 'whenprogress',
        			identifier: progressIdentifier || 'progress',
        			body: body
        		};
        	})(pos0.offset, pos0.line, pos0.column, result0[3], result0[6]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_PlaceholderBlock() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_OpenToken();
        if (result0 !== null) {
          result1 = [];
          result2 = parse_S();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_S();
          }
          if (result1 !== null) {
            if (input.substr(pos.offset, 11) === "placeholder") {
              result2 = "placeholder";
              advance(pos, 11);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"placeholder\"");
              }
            }
            if (result2 !== null) {
              result3 = parse_PlaceholderIdentifier();
              result3 = result3 !== null ? result3 : "";
              if (result3 !== null) {
                result4 = [];
                result5 = parse_S();
                while (result5 !== null) {
                  result4.push(result5);
                  result5 = parse_S();
                }
                if (result4 !== null) {
                  result5 = parse_CloseToken();
                  if (result5 !== null) {
                    result0 = [result0, result1, result2, result3, result4, result5];
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, identifier) {
        		return {
        			type: 'placeholder',
        			identifier: identifier || 'default'
        		};
        	})(pos0.offset, pos0.line, pos0.column, result0[3]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_PlaceholderIdentifier() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result1 = parse_S();
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            result1 = parse_S();
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result1 = parse_Identifier();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, identifier) {
        		return identifier;
        	})(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_Arguments() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = [];
        result1 = parse_S();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_S();
        }
        if (result0 !== null) {
          if (input.charCodeAt(pos.offset) === 40) {
            result1 = "(";
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"(\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_Expression();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result3 = [];
              result4 = parse_Argument();
              while (result4 !== null) {
                result3.push(result4);
                result4 = parse_Argument();
              }
              if (result3 !== null) {
                if (input.charCodeAt(pos.offset) === 41) {
                  result4 = ")";
                  advance(pos, 1);
                } else {
                  result4 = null;
                  if (reportFailures === 0) {
                    matchFailed("\")\"");
                  }
                }
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, firstArg, args) {
        		return firstArg ? [ firstArg ].concat(args) : [];
        	})(pos0.offset, pos0.line, pos0.column, result0[2], result0[3]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_Argument() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = [];
        result1 = parse_S();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_S();
        }
        if (result0 !== null) {
          if (input.charCodeAt(pos.offset) === 44) {
            result1 = ",";
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\",\"");
            }
          }
          if (result1 !== null) {
            result2 = [];
            result3 = parse_S();
            while (result3 !== null) {
              result2.push(result3);
              result3 = parse_S();
            }
            if (result2 !== null) {
              result3 = parse_Expression();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, arg) {
        		return arg;
        	})(pos0.offset, pos0.line, pos0.column, result0[3]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_Expression() {
        var result0;
        
        result0 = parse_Null();
        if (result0 === null) {
          result0 = parse_Undefined();
          if (result0 === null) {
            result0 = parse_Boolean();
            if (result0 === null) {
              result0 = parse_Number();
              if (result0 === null) {
                result0 = parse_String();
                if (result0 === null) {
                  result0 = parse_Object();
                }
              }
            }
          }
        }
        return result0;
      }
      
      function parse_Variable() {
        var result0;
        
        result0 = parse_CallVariable();
        if (result0 === null) {
          result0 = parse_ReferenceVariable();
        }
        return result0;
      }
      
      function parse_ReferenceVariable() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_Identifier();
        if (result0 !== null) {
          result1 = [];
          result2 = parse_ArrayAccessor();
          if (result2 === null) {
            result2 = parse_DotAccessor();
          }
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_ArrayAccessor();
            if (result2 === null) {
              result2 = parse_DotAccessor();
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, identifier, accessors) {
        		return {
        			type: 'variable',
        			identifier: [ identifier ].concat(accessors)
        		};
        	})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_ArrayAccessor() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = [];
        result1 = parse_S();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_S();
        }
        if (result0 !== null) {
          if (input.charCodeAt(pos.offset) === 91) {
            result1 = "[";
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"[\"");
            }
          }
          if (result1 !== null) {
            result2 = [];
            result3 = parse_S();
            while (result3 !== null) {
              result2.push(result3);
              result3 = parse_S();
            }
            if (result2 !== null) {
              result3 = parse_Expression();
              if (result3 !== null) {
                result4 = [];
                result5 = parse_S();
                while (result5 !== null) {
                  result4.push(result5);
                  result5 = parse_S();
                }
                if (result4 !== null) {
                  if (input.charCodeAt(pos.offset) === 93) {
                    result5 = "]";
                    advance(pos, 1);
                  } else {
                    result5 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"]\"");
                    }
                  }
                  if (result5 !== null) {
                    result0 = [result0, result1, result2, result3, result4, result5];
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, identifier) {
        		return identifier;
        	})(pos0.offset, pos0.line, pos0.column, result0[3]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_DotAccessor() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = [];
        result1 = parse_S();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_S();
        }
        if (result0 !== null) {
          if (input.charCodeAt(pos.offset) === 46) {
            result1 = ".";
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\".\"");
            }
          }
          if (result1 !== null) {
            result2 = [];
            result3 = parse_S();
            while (result3 !== null) {
              result2.push(result3);
              result3 = parse_S();
            }
            if (result2 !== null) {
              result3 = parse_Identifier();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, identifier) {
        		return identifier;
        	})(pos0.offset, pos0.line, pos0.column, result0[3]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_CallVariable() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_ReferenceVariable();
        if (result0 !== null) {
          result1 = parse_Arguments();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, variable, args) {
        		return {
        			type: 'callvariable',
        			variable: variable,
        			args: args
        		};
        	})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_Identifier() {
        var result0, result1;
        var pos0;
        
        pos0 = clone(pos);
        if (/^[a-zA-Z0-9_$]/.test(input.charAt(pos.offset))) {
          result1 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("[a-zA-Z0-9_$]");
          }
        }
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            if (/^[a-zA-Z0-9_$]/.test(input.charAt(pos.offset))) {
              result1 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("[a-zA-Z0-9_$]");
              }
            }
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, identifier) {
        		return { type: 'identifier', value: identifier.join('') };
        	})(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_String() {
        var result0, result1, result2;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.charCodeAt(pos.offset) === 39) {
          result0 = "'";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"'\"");
          }
        }
        if (result0 !== null) {
          result1 = [];
          pos2 = clone(pos);
          if (input.substr(pos.offset, 2) === "\\'") {
            result2 = "\\'";
            advance(pos, 2);
          } else {
            result2 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\\\'\"");
            }
          }
          if (result2 !== null) {
            result2 = (function(offset, line, column) { return '\''; })(pos2.offset, pos2.line, pos2.column);
          }
          if (result2 === null) {
            pos = clone(pos2);
          }
          if (result2 === null) {
            if (/^[^']/.test(input.charAt(pos.offset))) {
              result2 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("[^']");
              }
            }
          }
          while (result2 !== null) {
            result1.push(result2);
            pos2 = clone(pos);
            if (input.substr(pos.offset, 2) === "\\'") {
              result2 = "\\'";
              advance(pos, 2);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"\\\\'\"");
              }
            }
            if (result2 !== null) {
              result2 = (function(offset, line, column) { return '\''; })(pos2.offset, pos2.line, pos2.column);
            }
            if (result2 === null) {
              pos = clone(pos2);
            }
            if (result2 === null) {
              if (/^[^']/.test(input.charAt(pos.offset))) {
                result2 = input.charAt(pos.offset);
                advance(pos, 1);
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("[^']");
                }
              }
            }
          }
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 39) {
              result2 = "'";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"'\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, string) {
        		return { type: 'literal', value: string.join('') };
        	})(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          if (input.charCodeAt(pos.offset) === 34) {
            result0 = "\"";
            advance(pos, 1);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\\"\"");
            }
          }
          if (result0 !== null) {
            result1 = [];
            pos2 = clone(pos);
            if (input.substr(pos.offset, 2) === "\\\"") {
              result2 = "\\\"";
              advance(pos, 2);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"\\\\\\\"\"");
              }
            }
            if (result2 !== null) {
              result2 = (function(offset, line, column) { return '"'; })(pos2.offset, pos2.line, pos2.column);
            }
            if (result2 === null) {
              pos = clone(pos2);
            }
            if (result2 === null) {
              if (/^[^"]/.test(input.charAt(pos.offset))) {
                result2 = input.charAt(pos.offset);
                advance(pos, 1);
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("[^\"]");
                }
              }
            }
            while (result2 !== null) {
              result1.push(result2);
              pos2 = clone(pos);
              if (input.substr(pos.offset, 2) === "\\\"") {
                result2 = "\\\"";
                advance(pos, 2);
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\"\\\\\\\"\"");
                }
              }
              if (result2 !== null) {
                result2 = (function(offset, line, column) { return '"'; })(pos2.offset, pos2.line, pos2.column);
              }
              if (result2 === null) {
                pos = clone(pos2);
              }
              if (result2 === null) {
                if (/^[^"]/.test(input.charAt(pos.offset))) {
                  result2 = input.charAt(pos.offset);
                  advance(pos, 1);
                } else {
                  result2 = null;
                  if (reportFailures === 0) {
                    matchFailed("[^\"]");
                  }
                }
              }
            }
            if (result1 !== null) {
              if (input.charCodeAt(pos.offset) === 34) {
                result2 = "\"";
                advance(pos, 1);
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\"\\\"\"");
                }
              }
              if (result2 !== null) {
                result0 = [result0, result1, result2];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, string) {
          		return { type: 'literal', value: string.join('') };
          	})(pos0.offset, pos0.line, pos0.column, result0[1]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        return result0;
      }
      
      function parse_Number() {
        var result0;
        var pos0;
        
        pos0 = clone(pos);
        result0 = parse_HexadecimalNumber();
        if (result0 === null) {
          result0 = parse_ExponentialNumber();
          if (result0 === null) {
            result0 = parse_DecimalNumber();
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, number) {
        		return { type: 'literal', value: number };
        	})(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_DecimalNumber() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (/^[+\-]/.test(input.charAt(pos.offset))) {
          result0 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[+\\-]");
          }
        }
        result0 = result0 !== null ? result0 : "";
        if (result0 !== null) {
          if (/^[0-9]/.test(input.charAt(pos.offset))) {
            result2 = input.charAt(pos.offset);
            advance(pos, 1);
          } else {
            result2 = null;
            if (reportFailures === 0) {
              matchFailed("[0-9]");
            }
          }
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              if (/^[0-9]/.test(input.charAt(pos.offset))) {
                result2 = input.charAt(pos.offset);
                advance(pos, 1);
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("[0-9]");
                }
              }
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            pos2 = clone(pos);
            if (input.charCodeAt(pos.offset) === 46) {
              result2 = ".";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\".\"");
              }
            }
            if (result2 !== null) {
              if (/^[0-9]/.test(input.charAt(pos.offset))) {
                result4 = input.charAt(pos.offset);
                advance(pos, 1);
              } else {
                result4 = null;
                if (reportFailures === 0) {
                  matchFailed("[0-9]");
                }
              }
              if (result4 !== null) {
                result3 = [];
                while (result4 !== null) {
                  result3.push(result4);
                  if (/^[0-9]/.test(input.charAt(pos.offset))) {
                    result4 = input.charAt(pos.offset);
                    advance(pos, 1);
                  } else {
                    result4 = null;
                    if (reportFailures === 0) {
                      matchFailed("[0-9]");
                    }
                  }
                }
              } else {
                result3 = null;
              }
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = clone(pos2);
              }
            } else {
              result2 = null;
              pos = clone(pos2);
            }
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, number) {
        		return +flatten(number);
        	})(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_ExponentialNumber() {
        var result0, result1, result2, result3, result4, result5, result6;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (/^[+\-]/.test(input.charAt(pos.offset))) {
          result0 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[+\\-]");
          }
        }
        result0 = result0 !== null ? result0 : "";
        if (result0 !== null) {
          if (/^[0-9]/.test(input.charAt(pos.offset))) {
            result2 = input.charAt(pos.offset);
            advance(pos, 1);
          } else {
            result2 = null;
            if (reportFailures === 0) {
              matchFailed("[0-9]");
            }
          }
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              if (/^[0-9]/.test(input.charAt(pos.offset))) {
                result2 = input.charAt(pos.offset);
                advance(pos, 1);
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("[0-9]");
                }
              }
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            if (input.substr(pos.offset, 1).toLowerCase() === "e") {
              result2 = input.substr(pos.offset, 1);
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"e\"");
              }
            }
            if (result2 !== null) {
              if (/^[0-9]/.test(input.charAt(pos.offset))) {
                result4 = input.charAt(pos.offset);
                advance(pos, 1);
              } else {
                result4 = null;
                if (reportFailures === 0) {
                  matchFailed("[0-9]");
                }
              }
              if (result4 !== null) {
                result3 = [];
                while (result4 !== null) {
                  result3.push(result4);
                  if (/^[0-9]/.test(input.charAt(pos.offset))) {
                    result4 = input.charAt(pos.offset);
                    advance(pos, 1);
                  } else {
                    result4 = null;
                    if (reportFailures === 0) {
                      matchFailed("[0-9]");
                    }
                  }
                }
              } else {
                result3 = null;
              }
              if (result3 !== null) {
                pos2 = clone(pos);
                if (input.charCodeAt(pos.offset) === 46) {
                  result4 = ".";
                  advance(pos, 1);
                } else {
                  result4 = null;
                  if (reportFailures === 0) {
                    matchFailed("\".\"");
                  }
                }
                if (result4 !== null) {
                  if (/^[0-9]/.test(input.charAt(pos.offset))) {
                    result6 = input.charAt(pos.offset);
                    advance(pos, 1);
                  } else {
                    result6 = null;
                    if (reportFailures === 0) {
                      matchFailed("[0-9]");
                    }
                  }
                  if (result6 !== null) {
                    result5 = [];
                    while (result6 !== null) {
                      result5.push(result6);
                      if (/^[0-9]/.test(input.charAt(pos.offset))) {
                        result6 = input.charAt(pos.offset);
                        advance(pos, 1);
                      } else {
                        result6 = null;
                        if (reportFailures === 0) {
                          matchFailed("[0-9]");
                        }
                      }
                    }
                  } else {
                    result5 = null;
                  }
                  if (result5 !== null) {
                    result4 = [result4, result5];
                  } else {
                    result4 = null;
                    pos = clone(pos2);
                  }
                } else {
                  result4 = null;
                  pos = clone(pos2);
                }
                result4 = result4 !== null ? result4 : "";
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, number) {
        		return +flatten(number);
        	})(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_HexadecimalNumber() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (/^[+\-]/.test(input.charAt(pos.offset))) {
          result0 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[+\\-]");
          }
        }
        result0 = result0 !== null ? result0 : "";
        if (result0 !== null) {
          if (input.substr(pos.offset, 2).toLowerCase() === "0x") {
            result1 = input.substr(pos.offset, 2);
            advance(pos, 2);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"0x\"");
            }
          }
          if (result1 !== null) {
            if (/^[0-9a-f]/i.test(input.charAt(pos.offset))) {
              result3 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result3 = null;
              if (reportFailures === 0) {
                matchFailed("[0-9a-f]i");
              }
            }
            if (result3 !== null) {
              result2 = [];
              while (result3 !== null) {
                result2.push(result3);
                if (/^[0-9a-f]/i.test(input.charAt(pos.offset))) {
                  result3 = input.charAt(pos.offset);
                  advance(pos, 1);
                } else {
                  result3 = null;
                  if (reportFailures === 0) {
                    matchFailed("[0-9a-f]i");
                  }
                }
              }
            } else {
              result2 = null;
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, number) {
        		return number;
        	})(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_Boolean() {
        var result0;
        var pos0;
        
        pos0 = clone(pos);
        if (input.substr(pos.offset, 4) === "true") {
          result0 = "true";
          advance(pos, 4);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"true\"");
          }
        }
        if (result0 === null) {
          if (input.substr(pos.offset, 5) === "false") {
            result0 = "false";
            advance(pos, 5);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"false\"");
            }
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, boolean) {
        		return { type: 'literal', value: boolean === 'true' };
        	})(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_Null() {
        var result0;
        var pos0;
        
        pos0 = clone(pos);
        if (input.substr(pos.offset, 4) === "null") {
          result0 = "null";
          advance(pos, 4);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"null\"");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column) {
        		return { type: 'literal', value: 'null' };
        	})(pos0.offset, pos0.line, pos0.column);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_Undefined() {
        var result0;
        var pos0;
        
        pos0 = clone(pos);
        if (input.substr(pos.offset, 9) === "undefined") {
          result0 = "undefined";
          advance(pos, 9);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"undefined\"");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column) {
        		return { type: 'literal', value: undefined };
        	})(pos0.offset, pos0.line, pos0.column);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_Object() {
        var result0;
        var pos0;
        
        pos0 = clone(pos);
        result0 = parse_RawObject();
        if (result0 !== null) {
          result0 = (function(offset, line, column, object) {
        		return { type: 'literal', value: new Function('return ' + flatten(object))() };
        	})(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_RawObject() {
        var result0, result1, result2, result3, result4;
        var pos0;
        
        pos0 = clone(pos);
        if (input.charCodeAt(pos.offset) === 123) {
          result0 = "{";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"{\"");
          }
        }
        if (result0 !== null) {
          result1 = [];
          if (/^[^}]/.test(input.charAt(pos.offset))) {
            result2 = input.charAt(pos.offset);
            advance(pos, 1);
          } else {
            result2 = null;
            if (reportFailures === 0) {
              matchFailed("[^}]");
            }
          }
          if (result2 === null) {
            result2 = parse_String();
            if (result2 === null) {
              result2 = parse_RawObject();
            }
          }
          while (result2 !== null) {
            result1.push(result2);
            if (/^[^}]/.test(input.charAt(pos.offset))) {
              result2 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("[^}]");
              }
            }
            if (result2 === null) {
              result2 = parse_String();
              if (result2 === null) {
                result2 = parse_RawObject();
              }
            }
          }
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 125) {
              result2 = "}";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"}\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos0);
            }
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          if (input.charCodeAt(pos.offset) === 91) {
            result0 = "[";
            advance(pos, 1);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"[\"");
            }
          }
          if (result0 !== null) {
            result1 = [];
            if (/^[^\]]/.test(input.charAt(pos.offset))) {
              result2 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("[^\\]]");
              }
            }
            if (result2 === null) {
              result2 = parse_String();
              if (result2 === null) {
                result2 = parse_RawObject();
              }
            }
            while (result2 !== null) {
              result1.push(result2);
              if (/^[^\]]/.test(input.charAt(pos.offset))) {
                result2 = input.charAt(pos.offset);
                advance(pos, 1);
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("[^\\]]");
                }
              }
              if (result2 === null) {
                result2 = parse_String();
                if (result2 === null) {
                  result2 = parse_RawObject();
                }
              }
            }
            if (result1 !== null) {
              if (input.charCodeAt(pos.offset) === 93) {
                result2 = "]";
                advance(pos, 1);
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\"]\"");
                }
              }
              if (result2 !== null) {
                result0 = [result0, result1, result2];
              } else {
                result0 = null;
                pos = clone(pos0);
              }
            } else {
              result0 = null;
              pos = clone(pos0);
            }
          } else {
            result0 = null;
            pos = clone(pos0);
          }
          if (result0 === null) {
            pos0 = clone(pos);
            if (input.charCodeAt(pos.offset) === 47) {
              result0 = "/";
              advance(pos, 1);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"/\"");
              }
            }
            if (result0 !== null) {
              result1 = [];
              if (input.substr(pos.offset, 2) === "\\/") {
                result2 = "\\/";
                advance(pos, 2);
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\"\\\\/\"");
                }
              }
              if (result2 === null) {
                if (/^[^\/]/.test(input.charAt(pos.offset))) {
                  result2 = input.charAt(pos.offset);
                  advance(pos, 1);
                } else {
                  result2 = null;
                  if (reportFailures === 0) {
                    matchFailed("[^\\/]");
                  }
                }
              }
              while (result2 !== null) {
                result1.push(result2);
                if (input.substr(pos.offset, 2) === "\\/") {
                  result2 = "\\/";
                  advance(pos, 2);
                } else {
                  result2 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"\\\\/\"");
                  }
                }
                if (result2 === null) {
                  if (/^[^\/]/.test(input.charAt(pos.offset))) {
                    result2 = input.charAt(pos.offset);
                    advance(pos, 1);
                  } else {
                    result2 = null;
                    if (reportFailures === 0) {
                      matchFailed("[^\\/]");
                    }
                  }
                }
              }
              if (result1 !== null) {
                if (input.charCodeAt(pos.offset) === 47) {
                  result2 = "/";
                  advance(pos, 1);
                } else {
                  result2 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"/\"");
                  }
                }
                if (result2 !== null) {
                  result3 = [];
                  if (/^[gim]/.test(input.charAt(pos.offset))) {
                    result4 = input.charAt(pos.offset);
                    advance(pos, 1);
                  } else {
                    result4 = null;
                    if (reportFailures === 0) {
                      matchFailed("[gim]");
                    }
                  }
                  while (result4 !== null) {
                    result3.push(result4);
                    if (/^[gim]/.test(input.charAt(pos.offset))) {
                      result4 = input.charAt(pos.offset);
                      advance(pos, 1);
                    } else {
                      result4 = null;
                      if (reportFailures === 0) {
                        matchFailed("[gim]");
                      }
                    }
                  }
                  if (result3 !== null) {
                    result0 = [result0, result1, result2, result3];
                  } else {
                    result0 = null;
                    pos = clone(pos0);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos0);
                }
              } else {
                result0 = null;
                pos = clone(pos0);
              }
            } else {
              result0 = null;
              pos = clone(pos0);
            }
          }
        }
        return result0;
      }
      
      function parse_OpenToken() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        reportFailures++;
        if (input.charCodeAt(pos.offset) === 92) {
          result0 = "\\";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\\\\"");
          }
        }
        reportFailures--;
        if (result0 === null) {
          result0 = "";
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          if (input.substr(pos.offset, 2) === "{%") {
            result1 = "{%";
            advance(pos, 2);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"{%\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_CloseToken() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        reportFailures++;
        if (input.charCodeAt(pos.offset) === 92) {
          result0 = "\\";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\\\\"");
          }
        }
        reportFailures--;
        if (result0 === null) {
          result0 = "";
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          if (input.substr(pos.offset, 2) === "%}") {
            result1 = "%}";
            advance(pos, 2);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"%}\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_S() {
        var result0;
        
        if (/^[ \t\n\r]/.test(input.charAt(pos.offset))) {
          result0 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[ \\t\\n\\r]");
          }
        }
        return result0;
      }
      
      
      function cleanupExpected(expected) {
        expected.sort();
        
        var lastExpected = null;
        var cleanExpected = [];
        for (var i = 0; i < expected.length; i++) {
          if (expected[i] !== lastExpected) {
            cleanExpected.push(expected[i]);
            lastExpected = expected[i];
          }
        }
        return cleanExpected;
      }
      
      
      
      	function flatten(data) {
      		return Array.prototype.concat.apply([], data).join('');
      	}
      
      
      var result = parseFunctions[startRule]();
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos.offset === input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos.offset < input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos.offset === 0|
       *   - |rightmostFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos.offset !== input.length) {
        var offset = Math.max(pos.offset, rightmostFailuresPos.offset);
        var found = offset < input.length ? input.charAt(offset) : null;
        var errorPosition = pos.offset > rightmostFailuresPos.offset ? pos : rightmostFailuresPos;
        
        throw new this.SyntaxError(
          cleanupExpected(rightmostFailuresExpected),
          found,
          offset,
          errorPosition.line,
          errorPosition.column
        );
      }
      
      return result;
    },
    
    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(expected, found, offset, line, column) {
    function buildMessage(expected, found) {
      var expectedHumanized, foundHumanized;
      
      switch (expected.length) {
        case 0:
          expectedHumanized = "end of input";
          break;
        case 1:
          expectedHumanized = expected[0];
          break;
        default:
          expectedHumanized = expected.slice(0, expected.length - 1).join(", ")
            + " or "
            + expected[expected.length - 1];
      }
      
      foundHumanized = found ? quote(found) : "end of input";
      
      return "Expected " + expectedHumanized + " but " + foundHumanized + " found.";
    }
    
    this.name = "SyntaxError";
    this.expected = expected;
    this.found = found;
    this.message = buildMessage(expected, found);
    this.offset = offset;
    this.line = line;
    this.column = column;
  };
  
  result.SyntaxError.prototype = Error.prototype;
  
  return result;
});
