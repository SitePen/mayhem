define([], function () {
  /*
   * Generated by PEG.js 0.7.0.
   *
   * http://pegjs.majda.cz/
   */
  
  function quote(s) {
    /*
     * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
     * string literal except for the closing quote character, backslash,
     * carriage return, line separator, paragraph separator, and line feed.
     * Any character may appear in the form of an escape sequence.
     *
     * For portability, we also escape escape all control and non-ASCII
     * characters. Note that "\0" and "\v" escape sequences are not used
     * because JSHint does not like the first and IE the second.
     */
     return '"' + s
      .replace(/\\/g, '\\\\')  // backslash
      .replace(/"/g, '\\"')    // closing quote character
      .replace(/\x08/g, '\\b') // backspace
      .replace(/\t/g, '\\t')   // horizontal tab
      .replace(/\n/g, '\\n')   // line feed
      .replace(/\f/g, '\\f')   // form feed
      .replace(/\r/g, '\\r')   // carriage return
      .replace(/[\x00-\x07\x0B\x0E-\x1F\x80-\uFFFF]/g, escape)
      + '"';
  }
  
  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
     */
    parse: function(input, startRule) {
      var parseFunctions = {
        "start": parse_start,
        "ContentOrEmpty": parse_ContentOrEmpty,
        "Content": parse_Content,
        "HtmlFragment": parse_HtmlFragment,
        "IfTag": parse_IfTag,
        "IfTagOpen": parse_IfTagOpen,
        "IfTagClose": parse_IfTagClose,
        "ElseIfTag": parse_ElseIfTag,
        "ElseTag": parse_ElseTag,
        "ForTag": parse_ForTag,
        "ForTagOpen": parse_ForTagOpen,
        "ForTagClose": parse_ForTagClose,
        "WhenTag": parse_WhenTag,
        "WhenTagOpen": parse_WhenTagOpen,
        "WhenTagClose": parse_WhenTagClose,
        "WhenErrorTag": parse_WhenErrorTag,
        "WhenProgressTag": parse_WhenProgressTag,
        "PlaceholderTag": parse_PlaceholderTag,
        "DataTag": parse_DataTag,
        "AliasTag": parse_AliasTag,
        "Attributes": parse_Attributes,
        "Attribute": parse_Attribute,
        "AttributeName": parse_AttributeName,
        "AttributeValue": parse_AttributeValue,
        "S": parse_S
      };
      
      if (startRule !== undefined) {
        if (parseFunctions[startRule] === undefined) {
          throw new Error("Invalid rule name: " + quote(startRule) + ".");
        }
      } else {
        startRule = "start";
      }
      
      var pos = { offset: 0, line: 1, column: 1, seenCR: false };
      var reportFailures = 0;
      var rightmostFailuresPos = { offset: 0, line: 1, column: 1, seenCR: false };
      var rightmostFailuresExpected = [];
      
      function padLeft(input, padding, length) {
        var result = input;
        
        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }
        
        return result;
      }
      
      function escape(ch) {
        var charCode = ch.charCodeAt(0);
        var escapeChar;
        var length;
        
        if (charCode <= 0xFF) {
          escapeChar = 'x';
          length = 2;
        } else {
          escapeChar = 'u';
          length = 4;
        }
        
        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }
      
      function clone(object) {
        var result = {};
        for (var key in object) {
          result[key] = object[key];
        }
        return result;
      }
      
      function advance(pos, n) {
        var endOffset = pos.offset + n;
        
        for (var offset = pos.offset; offset < endOffset; offset++) {
          var ch = input.charAt(offset);
          if (ch === "\n") {
            if (!pos.seenCR) { pos.line++; }
            pos.column = 1;
            pos.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            pos.line++;
            pos.column = 1;
            pos.seenCR = true;
          } else {
            pos.column++;
            pos.seenCR = false;
          }
        }
        
        pos.offset += n;
      }
      
      function matchFailed(failure) {
        if (pos.offset < rightmostFailuresPos.offset) {
          return;
        }
        
        if (pos.offset > rightmostFailuresPos.offset) {
          rightmostFailuresPos = clone(pos);
          rightmostFailuresExpected = [];
        }
        
        rightmostFailuresExpected.push(failure);
      }
      
      function parse_start() {
        var result0;
        var pos0;
        
        pos0 = clone(pos);
        result0 = parse_ContentOrEmpty();
        if (result0 !== null) {
          result0 = (function(offset, line, column, content) {
        		if (content) {
        			content.aliases = aliases;
        		}
        		return content;
        	})(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_ContentOrEmpty() {
        var result0;
        
        result0 = parse_Content();
        result0 = result0 !== null ? result0 : "";
        return result0;
      }
      
      function parse_Content() {
        var result0, result1;
        var pos0;
        
        pos0 = clone(pos);
        result1 = parse_IfTag();
        if (result1 === null) {
          result1 = parse_ForTag();
          if (result1 === null) {
            result1 = parse_WhenTag();
            if (result1 === null) {
              result1 = parse_PlaceholderTag();
              if (result1 === null) {
                result1 = parse_DataTag();
                if (result1 === null) {
                  result1 = parse_AliasTag();
                  if (result1 === null) {
                    result1 = parse_HtmlFragment();
                  }
                }
              }
            }
          }
        }
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            result1 = parse_IfTag();
            if (result1 === null) {
              result1 = parse_ForTag();
              if (result1 === null) {
                result1 = parse_WhenTag();
                if (result1 === null) {
                  result1 = parse_PlaceholderTag();
                  if (result1 === null) {
                    result1 = parse_DataTag();
                    if (result1 === null) {
                      result1 = parse_AliasTag();
                      if (result1 === null) {
                        result1 = parse_HtmlFragment();
                      }
                    }
                  }
                }
              }
            }
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, nodes) {
        		// Flatten content into a single HTML string
        		// with <script id></script> tags marking place for the template nodes.
        		var htmlFragmentBuffer = [],
        			templateNodes = [];
        
        		for(var i = 0; i < nodes.length; i++) {
        			var node = nodes[i];
        			if (node instanceof HtmlFragmentNode) {
        				htmlFragmentBuffer.push(node.html);
        			}
        			else if (node.type === 'alias') {
        				aliases[node.from] = node.to;
        			}
        			else {
        				// TODO: Colin prefers the use of comment nodes, but it appears we'll need to stick w/ <script> for this step since it is queryable.
        				node.id = getNextId();
        				htmlFragmentBuffer.push('<script data-template-node-id="' + node.id + '"></script>');
        				templateNodes.push(node);
        			}
        		}
        
        		// TODO: Make proper constructor for this.
        		return {
        			type: 'fragment',
        			html: htmlFragmentBuffer.join(''),
        			templateNodes: templateNodes
        		};
        	})(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_HtmlFragment() {
        var result0, result1, result2;
        var pos0, pos1, pos2, pos3, pos4, pos5;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        pos2 = clone(pos);
        pos3 = clone(pos);
        reportFailures++;
        pos4 = clone(pos);
        pos5 = clone(pos);
        reportFailures++;
        if (input.charCodeAt(pos.offset) === 60) {
          result1 = "<";
          advance(pos, 1);
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("\"<\"");
          }
        }
        reportFailures--;
        if (result1 !== null) {
          result1 = "";
          pos = clone(pos5);
        } else {
          result1 = null;
        }
        if (result1 !== null) {
          result2 = parse_IfTagOpen();
          if (result2 !== null) {
            result1 = [result1, result2];
          } else {
            result1 = null;
            pos = clone(pos4);
          }
        } else {
          result1 = null;
          pos = clone(pos4);
        }
        if (result1 === null) {
          result1 = parse_ElseIfTag();
          if (result1 === null) {
            result1 = parse_ElseTag();
            if (result1 === null) {
              result1 = parse_IfTagClose();
              if (result1 === null) {
                result1 = parse_ForTagOpen();
                if (result1 === null) {
                  result1 = parse_ForTagClose();
                  if (result1 === null) {
                    result1 = parse_WhenTagOpen();
                    if (result1 === null) {
                      result1 = parse_WhenTagClose();
                      if (result1 === null) {
                        result1 = parse_WhenErrorTag();
                        if (result1 === null) {
                          result1 = parse_WhenProgressTag();
                          if (result1 === null) {
                            result1 = parse_PlaceholderTag();
                            if (result1 === null) {
                              result1 = parse_DataTag();
                              if (result1 === null) {
                                result1 = parse_AliasTag();
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        reportFailures--;
        if (result1 === null) {
          result1 = "";
        } else {
          result1 = null;
          pos = clone(pos3);
        }
        if (result1 !== null) {
          if (input.length > pos.offset) {
            result2 = input.charAt(pos.offset);
            advance(pos, 1);
          } else {
            result2 = null;
            if (reportFailures === 0) {
              matchFailed("any character");
            }
          }
          if (result2 !== null) {
            result1 = [result1, result2];
          } else {
            result1 = null;
            pos = clone(pos2);
          }
        } else {
          result1 = null;
          pos = clone(pos2);
        }
        if (result1 !== null) {
          result1 = (function(offset, line, column, character) { return character; })(pos1.offset, pos1.line, pos1.column, result1[1]);
        }
        if (result1 === null) {
          pos = clone(pos1);
        }
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            pos1 = clone(pos);
            pos2 = clone(pos);
            pos3 = clone(pos);
            reportFailures++;
            pos4 = clone(pos);
            pos5 = clone(pos);
            reportFailures++;
            if (input.charCodeAt(pos.offset) === 60) {
              result1 = "<";
              advance(pos, 1);
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("\"<\"");
              }
            }
            reportFailures--;
            if (result1 !== null) {
              result1 = "";
              pos = clone(pos5);
            } else {
              result1 = null;
            }
            if (result1 !== null) {
              result2 = parse_IfTagOpen();
              if (result2 !== null) {
                result1 = [result1, result2];
              } else {
                result1 = null;
                pos = clone(pos4);
              }
            } else {
              result1 = null;
              pos = clone(pos4);
            }
            if (result1 === null) {
              result1 = parse_ElseIfTag();
              if (result1 === null) {
                result1 = parse_ElseTag();
                if (result1 === null) {
                  result1 = parse_IfTagClose();
                  if (result1 === null) {
                    result1 = parse_ForTagOpen();
                    if (result1 === null) {
                      result1 = parse_ForTagClose();
                      if (result1 === null) {
                        result1 = parse_WhenTagOpen();
                        if (result1 === null) {
                          result1 = parse_WhenTagClose();
                          if (result1 === null) {
                            result1 = parse_WhenErrorTag();
                            if (result1 === null) {
                              result1 = parse_WhenProgressTag();
                              if (result1 === null) {
                                result1 = parse_PlaceholderTag();
                                if (result1 === null) {
                                  result1 = parse_DataTag();
                                  if (result1 === null) {
                                    result1 = parse_AliasTag();
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            reportFailures--;
            if (result1 === null) {
              result1 = "";
            } else {
              result1 = null;
              pos = clone(pos3);
            }
            if (result1 !== null) {
              if (input.length > pos.offset) {
                result2 = input.charAt(pos.offset);
                advance(pos, 1);
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("any character");
                }
              }
              if (result2 !== null) {
                result1 = [result1, result2];
              } else {
                result1 = null;
                pos = clone(pos2);
              }
            } else {
              result1 = null;
              pos = clone(pos2);
            }
            if (result1 !== null) {
              result1 = (function(offset, line, column, character) { return character; })(pos1.offset, pos1.line, pos1.column, result1[1]);
            }
            if (result1 === null) {
              pos = clone(pos1);
            }
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, content) {
        		return new HtmlFragmentNode(content.join(''));
        	})(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_IfTag() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1, pos2, pos3;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_IfTagOpen();
        if (result0 !== null) {
          result1 = parse_ContentOrEmpty();
          if (result1 !== null) {
            result2 = [];
            pos2 = clone(pos);
            pos3 = clone(pos);
            result3 = parse_ElseIfTag();
            if (result3 !== null) {
              result4 = parse_ContentOrEmpty();
              if (result4 !== null) {
                result3 = [result3, result4];
              } else {
                result3 = null;
                pos = clone(pos3);
              }
            } else {
              result3 = null;
              pos = clone(pos3);
            }
            if (result3 !== null) {
              result3 = (function(offset, line, column, elseIfNode, content) {
            			elseIfNode.content = content;
            			return elseIfNode;
            		})(pos2.offset, pos2.line, pos2.column, result3[0], result3[1]);
            }
            if (result3 === null) {
              pos = clone(pos2);
            }
            while (result3 !== null) {
              result2.push(result3);
              pos2 = clone(pos);
              pos3 = clone(pos);
              result3 = parse_ElseIfTag();
              if (result3 !== null) {
                result4 = parse_ContentOrEmpty();
                if (result4 !== null) {
                  result3 = [result3, result4];
                } else {
                  result3 = null;
                  pos = clone(pos3);
                }
              } else {
                result3 = null;
                pos = clone(pos3);
              }
              if (result3 !== null) {
                result3 = (function(offset, line, column, elseIfNode, content) {
              			elseIfNode.content = content;
              			return elseIfNode;
              		})(pos2.offset, pos2.line, pos2.column, result3[0], result3[1]);
              }
              if (result3 === null) {
                pos = clone(pos2);
              }
            }
            if (result2 !== null) {
              pos2 = clone(pos);
              pos3 = clone(pos);
              result3 = parse_ElseTag();
              if (result3 !== null) {
                result4 = parse_ContentOrEmpty();
                if (result4 !== null) {
                  result3 = [result3, result4];
                } else {
                  result3 = null;
                  pos = clone(pos3);
                }
              } else {
                result3 = null;
                pos = clone(pos3);
              }
              if (result3 !== null) {
                result3 = (function(offset, line, column, content) { return content; })(pos2.offset, pos2.line, pos2.column, result3[1]);
              }
              if (result3 === null) {
                pos = clone(pos2);
              }
              result3 = result3 !== null ? result3 : "";
              if (result3 !== null) {
                result4 = parse_IfTagClose();
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, ifNode, content, elseIfNodes, elseContent) {
        		ifNode.content = content;
        
        		// Combine 'if' and 'elseif' into ordered list of conditional blocks
        		var conditionalBlocks = [ createConditionalBlock(ifNode) ];
        		while (elseIfNodes.length > 0) {
        			var elseIfNode = elseIfNodes.shift();
        			conditionalBlocks.push(createConditionalBlock(elseIfNode));
        		}
        
        		// TODO: Create constructor for this transformed 'if' AST node
        		return {
        			type: 'if',
        			conditionalBlocks: conditionalBlocks,
        			elseBlock: { content: elseContent }
        		};
        	})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1], result0[2], result0[3]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_IfTagOpen() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 3) === "<if") {
          result0 = "<if";
          advance(pos, 3);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"<if\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_Attributes();
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 62) {
              result2 = ">";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\">\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, attributes) {
        		return new IfNode(attributes);
        	})(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_IfTagClose() {
        var result0;
        
        if (input.substr(pos.offset, 5) === "</if>") {
          result0 = "</if>";
          advance(pos, 5);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"</if>\"");
          }
        }
        return result0;
      }
      
      function parse_ElseIfTag() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 7) === "<elseif") {
          result0 = "<elseif";
          advance(pos, 7);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"<elseif\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_Attributes();
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 62) {
              result2 = ">";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\">\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, attributes) {
        		return new ElseIfNode(attributes);
        	})(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_ElseTag() {
        var result0;
        
        if (input.substr(pos.offset, 6) === "<else>") {
          result0 = "<else>";
          advance(pos, 6);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"<else>\"");
          }
        }
        return result0;
      }
      
      function parse_ForTag() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_ForTagOpen();
        if (result0 !== null) {
          result1 = parse_ContentOrEmpty();
          if (result1 !== null) {
            result2 = parse_ForTagClose();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, forNode, content) {
        		forNode.content = content;
        		return forNode;
        	})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_ForTagOpen() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 4) === "<for") {
          result0 = "<for";
          advance(pos, 4);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"<for\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_Attributes();
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 62) {
              result2 = ">";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\">\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, attributes) {
        		return new ForNode(attributes);
        	})(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_ForTagClose() {
        var result0;
        
        if (input.substr(pos.offset, 6) === "</for>") {
          result0 = "</for>";
          advance(pos, 6);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"</for>\"");
          }
        }
        return result0;
      }
      
      function parse_WhenTag() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1, pos2, pos3;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_WhenTagOpen();
        if (result0 !== null) {
          result1 = parse_ContentOrEmpty();
          if (result1 !== null) {
            pos2 = clone(pos);
            pos3 = clone(pos);
            result2 = parse_WhenErrorTag();
            if (result2 !== null) {
              result3 = parse_ContentOrEmpty();
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = clone(pos3);
              }
            } else {
              result2 = null;
              pos = clone(pos3);
            }
            if (result2 !== null) {
              result2 = (function(offset, line, column, content) { return content; })(pos2.offset, pos2.line, pos2.column, result2[1]);
            }
            if (result2 === null) {
              pos = clone(pos2);
            }
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              pos2 = clone(pos);
              pos3 = clone(pos);
              result3 = parse_WhenProgressTag();
              if (result3 !== null) {
                result4 = parse_ContentOrEmpty();
                if (result4 !== null) {
                  result3 = [result3, result4];
                } else {
                  result3 = null;
                  pos = clone(pos3);
                }
              } else {
                result3 = null;
                pos = clone(pos3);
              }
              if (result3 !== null) {
                result3 = (function(offset, line, column, content) { return content; })(pos2.offset, pos2.line, pos2.column, result3[1]);
              }
              if (result3 === null) {
                pos = clone(pos2);
              }
              result3 = result3 !== null ? result3 : "";
              if (result3 !== null) {
                result4 = parse_WhenTagClose();
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, whenNode, resolvedContent, errorContent, progressContent) {
        		whenNode.resolvedContent = resolvedContent;
        		whenNode.errorContent = errorContent;
        		whenNode.progressContent = progressContent;
        		return whenNode;
        	})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1], result0[2], result0[3]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_WhenTagOpen() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 5) === "<when") {
          result0 = "<when";
          advance(pos, 5);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"<when\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_Attributes();
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 62) {
              result2 = ">";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\">\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, attributes) {
        		return new WhenNode(attributes);
        	})(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_WhenTagClose() {
        var result0;
        
        if (input.substr(pos.offset, 7) === "</when>") {
          result0 = "</when>";
          advance(pos, 7);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"</when>\"");
          }
        }
        return result0;
      }
      
      function parse_WhenErrorTag() {
        var result0;
        
        if (input.substr(pos.offset, 7) === "<error>") {
          result0 = "<error>";
          advance(pos, 7);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"<error>\"");
          }
        }
        return result0;
      }
      
      function parse_WhenProgressTag() {
        var result0;
        
        if (input.substr(pos.offset, 10) === "<progress>") {
          result0 = "<progress>";
          advance(pos, 10);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"<progress>\"");
          }
        }
        return result0;
      }
      
      function parse_PlaceholderTag() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 12) === "<placeholder") {
          result0 = "<placeholder";
          advance(pos, 12);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"<placeholder\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_Attributes();
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 62) {
              result2 = ">";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\">\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, attributes) {
        		return new PlaceholderNode(attributes);
        	})(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_DataTag() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 5) === "<data") {
          result0 = "<data";
          advance(pos, 5);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"<data\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_Attributes();
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 62) {
              result2 = ">";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\">\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, attributes) {
        		return new DataNode(attributes);
        	})(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_AliasTag() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 6) === "<alias") {
          result0 = "<alias";
          advance(pos, 6);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"<alias\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_Attributes();
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 62) {
              result2 = ">";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\">\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, attributes) {
        		return new AliasNode(attributes);
        	})(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_Attributes() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = [];
        result1 = parse_Attribute();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_Attribute();
        }
        if (result0 !== null) {
          result1 = [];
          result2 = parse_S();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_S();
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, attributes) { return attributes; })(pos0.offset, pos0.line, pos0.column, result0[0]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_Attribute() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1, pos2, pos3;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result1 = parse_S();
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            result1 = parse_S();
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result1 = parse_AttributeName();
          if (result1 !== null) {
            pos2 = clone(pos);
            pos3 = clone(pos);
            result2 = [];
            result3 = parse_S();
            while (result3 !== null) {
              result2.push(result3);
              result3 = parse_S();
            }
            if (result2 !== null) {
              if (input.charCodeAt(pos.offset) === 61) {
                result3 = "=";
                advance(pos, 1);
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("\"=\"");
                }
              }
              if (result3 !== null) {
                result4 = [];
                result5 = parse_S();
                while (result5 !== null) {
                  result4.push(result5);
                  result5 = parse_S();
                }
                if (result4 !== null) {
                  result5 = parse_AttributeValue();
                  if (result5 !== null) {
                    result2 = [result2, result3, result4, result5];
                  } else {
                    result2 = null;
                    pos = clone(pos3);
                  }
                } else {
                  result2 = null;
                  pos = clone(pos3);
                }
              } else {
                result2 = null;
                pos = clone(pos3);
              }
            } else {
              result2 = null;
              pos = clone(pos3);
            }
            if (result2 !== null) {
              result2 = (function(offset, line, column, value) { return value; })(pos2.offset, pos2.line, pos2.column, result2[3]);
            }
            if (result2 === null) {
              pos = clone(pos2);
            }
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, name, value) {
        		return { name: name, value: value };
        	})(pos0.offset, pos0.line, pos0.column, result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_AttributeName() {
        var result0, result1;
        var pos0;
        
        pos0 = clone(pos);
        if (/^[a-zA-Z]/.test(input.charAt(pos.offset))) {
          result1 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("[a-zA-Z]");
          }
        }
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            if (/^[a-zA-Z]/.test(input.charAt(pos.offset))) {
              result1 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("[a-zA-Z]");
              }
            }
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, nameChars) { return nameChars.join(''); })(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_AttributeValue() {
        var result0, result1, result2;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.charCodeAt(pos.offset) === 39) {
          result0 = "'";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"'\"");
          }
        }
        if (result0 !== null) {
          result1 = [];
          pos2 = clone(pos);
          if (input.substr(pos.offset, 2) === "\\'") {
            result2 = "\\'";
            advance(pos, 2);
          } else {
            result2 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\\\'\"");
            }
          }
          if (result2 !== null) {
            result2 = (function(offset, line, column) { return "'" })(pos2.offset, pos2.line, pos2.column);
          }
          if (result2 === null) {
            pos = clone(pos2);
          }
          if (result2 === null) {
            if (/^[^'\r\n]/.test(input.charAt(pos.offset))) {
              result2 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("[^'\\r\\n]");
              }
            }
          }
          while (result2 !== null) {
            result1.push(result2);
            pos2 = clone(pos);
            if (input.substr(pos.offset, 2) === "\\'") {
              result2 = "\\'";
              advance(pos, 2);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"\\\\'\"");
              }
            }
            if (result2 !== null) {
              result2 = (function(offset, line, column) { return "'" })(pos2.offset, pos2.line, pos2.column);
            }
            if (result2 === null) {
              pos = clone(pos2);
            }
            if (result2 === null) {
              if (/^[^'\r\n]/.test(input.charAt(pos.offset))) {
                result2 = input.charAt(pos.offset);
                advance(pos, 1);
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("[^'\\r\\n]");
                }
              }
            }
          }
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 39) {
              result2 = "'";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"'\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, value) { return value.join(''); })(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          if (input.charCodeAt(pos.offset) === 34) {
            result0 = "\"";
            advance(pos, 1);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\\"\"");
            }
          }
          if (result0 !== null) {
            result1 = [];
            pos2 = clone(pos);
            if (input.substr(pos.offset, 2) === "\\\"") {
              result2 = "\\\"";
              advance(pos, 2);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"\\\\\\\"\"");
              }
            }
            if (result2 !== null) {
              result2 = (function(offset, line, column) { return '"' })(pos2.offset, pos2.line, pos2.column);
            }
            if (result2 === null) {
              pos = clone(pos2);
            }
            if (result2 === null) {
              if (/^[^"\r\n]/.test(input.charAt(pos.offset))) {
                result2 = input.charAt(pos.offset);
                advance(pos, 1);
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("[^\"\\r\\n]");
                }
              }
            }
            while (result2 !== null) {
              result1.push(result2);
              pos2 = clone(pos);
              if (input.substr(pos.offset, 2) === "\\\"") {
                result2 = "\\\"";
                advance(pos, 2);
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\"\\\\\\\"\"");
                }
              }
              if (result2 !== null) {
                result2 = (function(offset, line, column) { return '"' })(pos2.offset, pos2.line, pos2.column);
              }
              if (result2 === null) {
                pos = clone(pos2);
              }
              if (result2 === null) {
                if (/^[^"\r\n]/.test(input.charAt(pos.offset))) {
                  result2 = input.charAt(pos.offset);
                  advance(pos, 1);
                } else {
                  result2 = null;
                  if (reportFailures === 0) {
                    matchFailed("[^\"\\r\\n]");
                  }
                }
              }
            }
            if (result1 !== null) {
              if (input.charCodeAt(pos.offset) === 34) {
                result2 = "\"";
                advance(pos, 1);
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\"\\\"\"");
                }
              }
              if (result2 !== null) {
                result0 = [result0, result1, result2];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, value) { return value.join(''); })(pos0.offset, pos0.line, pos0.column, result0[1]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        return result0;
      }
      
      function parse_S() {
        var result0;
        
        reportFailures++;
        if (/^[ \t\r\n]/.test(input.charAt(pos.offset))) {
          result0 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[ \\t\\r\\n]");
          }
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("whitespace");
        }
        return result0;
      }
      
      
      function cleanupExpected(expected) {
        expected.sort();
        
        var lastExpected = null;
        var cleanExpected = [];
        for (var i = 0; i < expected.length; i++) {
          if (expected[i] !== lastExpected) {
            cleanExpected.push(expected[i]);
            lastExpected = expected[i];
          }
        }
        return cleanExpected;
      }
      
      
      
      	var nextId = 1;
      	function getNextId() {
      		return nextId++;
      	}
      
      	function createConditionalBlock(conditionalNode) {
      		return {
      			condition: conditionalNode.condition,
      			content: conditionalNode.content
      		};
      	}
      
      	function createNodeConstructor(/*String*/ type, /*Array*/ requiredAttributes) {
      		// summary:
      		//		Creates a constructor for a tag's AST node.
      		// type:
      		//		The AST node type.
      		// requiredAttributes:
      		//		The attributes required by the tag.
      
      		var requiredAttributeMap = {};
      		for (var i = 0; i < requiredAttributes.length; i++) {
      			requiredAttributeMap[requiredAttributes[i]] = true;
      		}
      
      		var Constructor = function (attributes) {
      			if (attributes !== undefined) {
      				var unsupportedAttributes = [];
      
      				for (var i = 0; i < attributes.length; i++) {
      					var attribute = attributes[i];
      					if (requiredAttributeMap[attribute.name]) {
      						this[attribute.name] = attribute.value;
      					}
      					else {
      						unsupportedAttributes.push(attribute.name);
      					}
      				}
      
      				if (unsupportedAttributes.length > 0) {
      					throw new Error(
      						'Type ' + type + ' does not support the attribute(s): ' + unsupportedAttributes.join(', ')
      					);
      				}
      			}
      		};
      		Constructor.prototype = {
      			type: type
      		};
      		return Constructor;
      	}
      
      	var IfNode = createNodeConstructor('if', [ 'condition' ]);
      	var ElseIfNode = createNodeConstructor('elseif', [ 'condition' ]);
      	var ForNode = createNodeConstructor('for', [ 'each', 'value' ]);
      	var WhenNode = createNodeConstructor('when', [ 'promise' ]);
      	var PlaceholderNode = createNodeConstructor('placeholder', [ 'name' ]);
      	var DataNode = createNodeConstructor('data', [ 'var' ]);
      	var AliasNode = createNodeConstructor('alias', [ 'from', 'to' ]);
      
      	function HtmlFragmentNode(html) {
      		this.html = html;
      	}
      	HtmlFragmentNode.prototype = { type: 'fragment' };
      
      	// TODO: Currently, aliases apply to the whole template regardless of where they are specified. Should they be scoped?
      	var aliases = {};
      
      
      var result = parseFunctions[startRule]();
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos.offset === input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos.offset < input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos.offset === 0|
       *   - |rightmostFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos.offset !== input.length) {
        var offset = Math.max(pos.offset, rightmostFailuresPos.offset);
        var found = offset < input.length ? input.charAt(offset) : null;
        var errorPosition = pos.offset > rightmostFailuresPos.offset ? pos : rightmostFailuresPos;
        
        throw new this.SyntaxError(
          cleanupExpected(rightmostFailuresExpected),
          found,
          offset,
          errorPosition.line,
          errorPosition.column
        );
      }
      
      return result;
    },
    
    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(expected, found, offset, line, column) {
    function buildMessage(expected, found) {
      var expectedHumanized, foundHumanized;
      
      switch (expected.length) {
        case 0:
          expectedHumanized = "end of input";
          break;
        case 1:
          expectedHumanized = expected[0];
          break;
        default:
          expectedHumanized = expected.slice(0, expected.length - 1).join(", ")
            + " or "
            + expected[expected.length - 1];
      }
      
      foundHumanized = found ? quote(found) : "end of input";
      
      return "Expected " + expectedHumanized + " but " + foundHumanized + " found.";
    }
    
    this.name = "SyntaxError";
    this.expected = expected;
    this.found = found;
    this.message = buildMessage(expected, found);
    this.offset = offset;
    this.line = line;
    this.column = column;
  };
  
  result.SyntaxError.prototype = Error.prototype;
  
  return result;
});
