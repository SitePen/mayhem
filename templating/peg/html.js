define([], function () {
  /*
   * Generated by PEG.js 0.8.0.
   *
   * http://pegjs.majda.cz/
   */

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function SyntaxError(message, expected, found, offset, line, column) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.offset   = offset;
    this.line     = line;
    this.column   = column;

    this.name     = "SyntaxError";
  }

  peg$subclass(SyntaxError, Error);

  function parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},

        peg$FAILED = {},

        peg$startRuleFunctions = { Template: peg$parseTemplate },
        peg$startRuleFunction  = peg$parseTemplate,

        peg$c0 = null,
        peg$c1 = function(root) {
        		if (!root) {
        			root = {
        				constructor: 'framework/ui/dom/Element',
        				html: '',
        				children: []
        			};
        		}

        		resolveAliases(root);
        		return root;
        	},
        peg$c2 = { type: "other", description: "HTML" },
        peg$c3 = [],
        peg$c4 = peg$FAILED,
        peg$c5 = function(content) {
        		var html = '',
        			children = [];

        		for (var i = 0, j = content.length; i < j; ++i) {
        			var node = content[i];

        			// An alias node will be transformed into a null node
        			if (!node) {
        				continue;
        			}

        			if (typeof node === 'string') {
        				html += node;
        			}
        			else {
        				html += '<!-- child#' + children.length + ' -->';
        				children.push(node);
        			}
        		}

        		return {
        			constructor: 'framework/ui/dom/Element',
        			html: html,
        			children: children
        		};
        	},
        peg$c6 = void 0,
        peg$c7 = { type: "any", description: "any character" },
        peg$c8 = function(character) { return character; },
        peg$c9 = function(content) {
        		return content.join('');
        	},
        peg$c10 = { type: "other", description: "<if>" },
        peg$c11 = function(alternate, consequent) {
        			alternate.content = consequent;
        			return alternate;
        		},
        peg$c12 = "else",
        peg$c13 = { type: "literal", value: "else", description: "\"else\"" },
        peg$c14 = function(content) { return content; },
        peg$c15 = function(conditional, consequent, alternates, alternate) {
        		conditional.content = consequent;

        		return {
        			constructor: 'framework/templating/html/ui/Conditional',
        			conditions: [ conditional ].concat(alternates),
        			alternate: alternate
        		};
        	},
        peg$c16 = "if",
        peg$c17 = { type: "literal", value: "if", description: "\"if\"" },
        peg$c18 = function(attributes) {
        		validate(attributes, { required: [ 'condition' ] });
        		return attributes;
        	},
        peg$c19 = { type: "other", description: "</if>" },
        peg$c20 = "/if",
        peg$c21 = { type: "literal", value: "/if", description: "\"/if\"" },
        peg$c22 = { type: "other", description: "<elseif>" },
        peg$c23 = "elseif",
        peg$c24 = { type: "literal", value: "elseif", description: "\"elseif\"" },
        peg$c25 = { type: "other", description: "<else>" },
        peg$c26 = { type: "other", description: "<for>" },
        peg$c27 = function(forWidget, template) {
        		forWidget.constructor = 'framework/templating/html/ui/Iterator';
        		forWidget.template = template;
        		return forWidget;
        	},
        peg$c28 = "for",
        peg$c29 = { type: "literal", value: "for", description: "\"for\"" },
        peg$c30 = function(attributes) {
        		validate(attributes, { required: [ 'each', 'value' ] });
        		return attributes;
        	},
        peg$c31 = { type: "other", description: "</for>" },
        peg$c32 = "/for",
        peg$c33 = { type: "literal", value: "/for", description: "\"/for\"" },
        peg$c34 = { type: "other", description: "<when>" },
        peg$c35 = function(when, resolved, error, progress) {
        		when.constructor = 'framework/templating/html/ui/When';
        		when.resolved = resolved;
        		when.error = error;
        		when.progress = progress;
        		return when;
        	},
        peg$c36 = "when",
        peg$c37 = { type: "literal", value: "when", description: "\"when\"" },
        peg$c38 = function(attributes) {
        		validate(attributes, { required: [ 'promise' ], optional: [ 'value' ] });
        		return attributes;
        	},
        peg$c39 = { type: "other", description: "</when>" },
        peg$c40 = "/when",
        peg$c41 = { type: "literal", value: "/when", description: "\"/when\"" },
        peg$c42 = { type: "other", description: "<error>" },
        peg$c43 = "error",
        peg$c44 = { type: "literal", value: "error", description: "\"error\"" },
        peg$c45 = { type: "other", description: "<progress>" },
        peg$c46 = "progress",
        peg$c47 = { type: "literal", value: "progress", description: "\"progress\"" },
        peg$c48 = { type: "other", description: "<widget>" },
        peg$c49 = function(widget, children) {
        		widget.children = children;
        		return widget;
        	},
        peg$c50 = "widget",
        peg$c51 = { type: "literal", value: "widget", description: "\"widget\"" },
        peg$c52 = function(attributes) {
        		validate(attributes, { required: [ 'is' ], allowAnyAttribute: true });
        		return attributes;
        	},
        peg$c53 = { type: "other", description: "</widget>" },
        peg$c54 = "/widget",
        peg$c55 = { type: "literal", value: "/widget", description: "\"/widget\"" },
        peg$c56 = { type: "other", description: "<placeholder>" },
        peg$c57 = "placeholder",
        peg$c58 = { type: "literal", value: "placeholder", description: "\"placeholder\"" },
        peg$c59 = function(placeholder) {
        		validate(placeholder, { required: [ 'name' ] });
        		placeholder.constructor = 'framework/templating/html/ui/Placeholder';
        		return placeholder;
        	},
        peg$c60 = { type: "other", description: "<data>" },
        peg$c61 = "data",
        peg$c62 = { type: "literal", value: "data", description: "\"data\"" },
        peg$c63 = function(attributes) {
        		validate(attributes, { required: [ 'var' ], optional: [ 'safe' ] });

        		var label = {
        			constructor: 'framework/ui/Widget!Label'
        		};

        		label[attributes.safe ? 'formattedText' : 'text'] = attributes['var'];
        		return label;
        	},
        peg$c64 = { type: "other", description: "<alias>" },
        peg$c65 = "alias",
        peg$c66 = { type: "literal", value: "alias", description: "\"alias\"" },
        peg$c67 = function(attributes) {
        		validate(attributes, { required: [ 'from', 'to' ] });
        		if (aliasMap[attributes.from]) {
        			error('Alias "' + attributes.from + '" is already defined');
        		}
        		aliasMap[attributes.from] = attributes.to;
        		return null;
        	},
        peg$c68 = function(attributes) {
        		var attributeMap = {};
        		for (var i = 0, attribute; (attribute = attributes[i]); ++i) {
        			if (attribute.name === 'constructor') {
        				throw new Error('"constructor" is a reserved attribute name');
        			}

        			if (attribute.name === 'is') {
        				attribute.name = 'constructor';
        			}

        			if (Object.prototype.hasOwnProperty.call(attributeMap, attribute.name)) {
        				throw new Error('Duplicate attribute "' + attribute.name + '"');
        			}

        			attributeMap[attribute.name] = attribute.value == null ? true : attribute.value;
        		}

        		return attributeMap;
        	},
        peg$c69 = "=",
        peg$c70 = { type: "literal", value: "=", description: "\"=\"" },
        peg$c71 = function(value) { return value; },
        peg$c72 = function(name, value) {
        		return { name: name, value: value };
        	},
        peg$c73 = /^[a-zA-Z\-]/,
        peg$c74 = { type: "class", value: "[a-zA-Z\\-]", description: "[a-zA-Z\\-]" },
        peg$c75 = function(nameChars) { return nameChars.join(''); },
        peg$c76 = "'",
        peg$c77 = { type: "literal", value: "'", description: "\"'\"" },
        peg$c78 = "\\'",
        peg$c79 = { type: "literal", value: "\\'", description: "\"\\\\'\"" },
        peg$c80 = function() { return "'"; },
        peg$c81 = /^[^'\r\n]/,
        peg$c82 = { type: "class", value: "[^'\\r\\n]", description: "[^'\\r\\n]" },
        peg$c83 = function(value) { return value.join(''); },
        peg$c84 = "\"",
        peg$c85 = { type: "literal", value: "\"", description: "\"\\\"\"" },
        peg$c86 = "\\\"",
        peg$c87 = { type: "literal", value: "\\\"", description: "\"\\\\\\\"\"" },
        peg$c88 = function() { return '"'; },
        peg$c89 = /^[^"\r\n]/,
        peg$c90 = { type: "class", value: "[^\"\\r\\n]", description: "[^\"\\r\\n]" },
        peg$c91 = { type: "other", description: "<" },
        peg$c92 = "<",
        peg$c93 = { type: "literal", value: "<", description: "\"<\"" },
        peg$c94 = { type: "other", description: ">" },
        peg$c95 = ">",
        peg$c96 = { type: "literal", value: ">", description: "\">\"" },
        peg$c97 = { type: "other", description: "whitespace" },
        peg$c98 = /^[ \t\r\n]/,
        peg$c99 = { type: "class", value: "[ \\t\\r\\n]", description: "[ \\t\\r\\n]" },

        peg$currPos          = 0,
        peg$reportedPos      = 0,
        peg$cachedPos        = 0,
        peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function text() {
      return input.substring(peg$reportedPos, peg$currPos);
    }

    function offset() {
      return peg$reportedPos;
    }

    function line() {
      return peg$computePosDetails(peg$reportedPos).line;
    }

    function column() {
      return peg$computePosDetails(peg$reportedPos).column;
    }

    function expected(description) {
      throw peg$buildException(
        null,
        [{ type: "other", description: description }],
        peg$reportedPos
      );
    }

    function error(message) {
      throw peg$buildException(message, null, peg$reportedPos);
    }

    function peg$computePosDetails(pos) {
      function advance(details, startPos, endPos) {
        var p, ch;

        for (p = startPos; p < endPos; p++) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) { details.line++; }
            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }
        }
      }

      if (peg$cachedPos !== pos) {
        if (peg$cachedPos > pos) {
          peg$cachedPos = 0;
          peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };
        }
        advance(peg$cachedPosDetails, peg$cachedPos, pos);
        peg$cachedPos = pos;
      }

      return peg$cachedPosDetails;
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildException(message, expected, pos) {
      function cleanupExpected(expected) {
        var i = 1;

        expected.sort(function(a, b) {
          if (a.description < b.description) {
            return -1;
          } else if (a.description > b.description) {
            return 1;
          } else {
            return 0;
          }
        });

        while (i < expected.length) {
          if (expected[i - 1] === expected[i]) {
            expected.splice(i, 1);
          } else {
            i++;
          }
        }
      }

      function buildMessage(expected, found) {
        function stringEscape(s) {
          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

          return s
            .replace(/\\/g,   '\\\\')
            .replace(/"/g,    '\\"')
            .replace(/\x08/g, '\\b')
            .replace(/\t/g,   '\\t')
            .replace(/\n/g,   '\\n')
            .replace(/\f/g,   '\\f')
            .replace(/\r/g,   '\\r')
            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
            .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
            .replace(/[\u0180-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
            .replace(/[\u1080-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
        }

        var expectedDescs = new Array(expected.length),
            expectedDesc, foundDesc, i;

        for (i = 0; i < expected.length; i++) {
          expectedDescs[i] = expected[i].description;
        }

        expectedDesc = expected.length > 1
          ? expectedDescs.slice(0, -1).join(", ")
              + " or "
              + expectedDescs[expected.length - 1]
          : expectedDescs[0];

        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
      }

      var posDetails = peg$computePosDetails(pos),
          found      = pos < input.length ? input.charAt(pos) : null;

      if (expected !== null) {
        cleanupExpected(expected);
      }

      return new SyntaxError(
        message !== null ? message : buildMessage(expected, found),
        expected,
        found,
        pos,
        posDetails.line,
        posDetails.column
      );
    }

    function peg$parseTemplate() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parseAny();
      if (s1 === peg$FAILED) {
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c1(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseAny() {
      var s0;

      s0 = peg$parseAnyNonElement();
      if (s0 === peg$FAILED) {
        s0 = peg$parseElement();
      }

      return s0;
    }

    function peg$parseAnyNonElement() {
      var s0;

      s0 = peg$parseIf();
      if (s0 === peg$FAILED) {
        s0 = peg$parseFor();
        if (s0 === peg$FAILED) {
          s0 = peg$parseWhen();
          if (s0 === peg$FAILED) {
            s0 = peg$parsePlaceholder();
            if (s0 === peg$FAILED) {
              s0 = peg$parseData();
              if (s0 === peg$FAILED) {
                s0 = peg$parseAlias();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseWidget();
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseElement() {
      var s0, s1, s2;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseAnyNonElement();
      if (s2 === peg$FAILED) {
        s2 = peg$parseHtmlFragment();
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parseAnyNonElement();
          if (s2 === peg$FAILED) {
            s2 = peg$parseHtmlFragment();
          }
        }
      } else {
        s1 = peg$c4;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c5(s1);
      }
      s0 = s1;
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c2); }
      }

      return s0;
    }

    function peg$parseHtmlFragment() {
      var s0, s1, s2, s3, s4, s5, s6;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$currPos;
      s3 = peg$currPos;
      peg$silentFails++;
      s4 = peg$currPos;
      s5 = peg$currPos;
      peg$silentFails++;
      s6 = peg$parseOpenToken();
      peg$silentFails--;
      if (s6 !== peg$FAILED) {
        peg$currPos = s5;
        s5 = peg$c6;
      } else {
        s5 = peg$c4;
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parseIfTagOpen();
        if (s6 !== peg$FAILED) {
          s5 = [s5, s6];
          s4 = s5;
        } else {
          peg$currPos = s4;
          s4 = peg$c4;
        }
      } else {
        peg$currPos = s4;
        s4 = peg$c4;
      }
      if (s4 === peg$FAILED) {
        s4 = peg$parseElseIfTag();
        if (s4 === peg$FAILED) {
          s4 = peg$parseElseTag();
          if (s4 === peg$FAILED) {
            s4 = peg$parseIfTagClose();
            if (s4 === peg$FAILED) {
              s4 = peg$parseForTagOpen();
              if (s4 === peg$FAILED) {
                s4 = peg$parseForTagClose();
                if (s4 === peg$FAILED) {
                  s4 = peg$parseWhenTagOpen();
                  if (s4 === peg$FAILED) {
                    s4 = peg$parseWhenTagClose();
                    if (s4 === peg$FAILED) {
                      s4 = peg$parseWhenErrorTag();
                      if (s4 === peg$FAILED) {
                        s4 = peg$parseWhenProgressTag();
                        if (s4 === peg$FAILED) {
                          s4 = peg$parsePlaceholder();
                          if (s4 === peg$FAILED) {
                            s4 = peg$parseData();
                            if (s4 === peg$FAILED) {
                              s4 = peg$parseAlias();
                              if (s4 === peg$FAILED) {
                                s4 = peg$parseWidgetTagOpen();
                                if (s4 === peg$FAILED) {
                                  s4 = peg$parseWidgetTagClose();
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      peg$silentFails--;
      if (s4 === peg$FAILED) {
        s3 = peg$c6;
      } else {
        peg$currPos = s3;
        s3 = peg$c4;
      }
      if (s3 !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c7); }
        }
        if (s4 !== peg$FAILED) {
          peg$reportedPos = s2;
          s3 = peg$c8(s4);
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$c4;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$c4;
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$currPos;
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$currPos;
          s5 = peg$currPos;
          peg$silentFails++;
          s6 = peg$parseOpenToken();
          peg$silentFails--;
          if (s6 !== peg$FAILED) {
            peg$currPos = s5;
            s5 = peg$c6;
          } else {
            s5 = peg$c4;
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parseIfTagOpen();
            if (s6 !== peg$FAILED) {
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$c4;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$c4;
          }
          if (s4 === peg$FAILED) {
            s4 = peg$parseElseIfTag();
            if (s4 === peg$FAILED) {
              s4 = peg$parseElseTag();
              if (s4 === peg$FAILED) {
                s4 = peg$parseIfTagClose();
                if (s4 === peg$FAILED) {
                  s4 = peg$parseForTagOpen();
                  if (s4 === peg$FAILED) {
                    s4 = peg$parseForTagClose();
                    if (s4 === peg$FAILED) {
                      s4 = peg$parseWhenTagOpen();
                      if (s4 === peg$FAILED) {
                        s4 = peg$parseWhenTagClose();
                        if (s4 === peg$FAILED) {
                          s4 = peg$parseWhenErrorTag();
                          if (s4 === peg$FAILED) {
                            s4 = peg$parseWhenProgressTag();
                            if (s4 === peg$FAILED) {
                              s4 = peg$parsePlaceholder();
                              if (s4 === peg$FAILED) {
                                s4 = peg$parseData();
                                if (s4 === peg$FAILED) {
                                  s4 = peg$parseAlias();
                                  if (s4 === peg$FAILED) {
                                    s4 = peg$parseWidgetTagOpen();
                                    if (s4 === peg$FAILED) {
                                      s4 = peg$parseWidgetTagClose();
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c6;
          } else {
            peg$currPos = s3;
            s3 = peg$c4;
          }
          if (s3 !== peg$FAILED) {
            if (input.length > peg$currPos) {
              s4 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c7); }
            }
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s2;
              s3 = peg$c8(s4);
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$c4;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c4;
          }
        }
      } else {
        s1 = peg$c4;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c9(s1);
      }
      s0 = s1;
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c2); }
      }

      return s0;
    }

    function peg$parseIf() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parseIfTagOpen();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseAny();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$currPos;
          s5 = peg$parseElseIfTag();
          if (s5 !== peg$FAILED) {
            s6 = peg$parseAny();
            if (s6 !== peg$FAILED) {
              peg$reportedPos = s4;
              s5 = peg$c11(s5, s6);
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$c4;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$c4;
          }
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$currPos;
            s5 = peg$parseElseIfTag();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseAny();
              if (s6 !== peg$FAILED) {
                peg$reportedPos = s4;
                s5 = peg$c11(s5, s6);
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$c4;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c4;
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$currPos;
            s5 = peg$parseOpenToken();
            if (s5 !== peg$FAILED) {
              if (input.substr(peg$currPos, 4) === peg$c12) {
                s6 = peg$c12;
                peg$currPos += 4;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c13); }
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parseCloseToken();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parseAny();
                  if (s8 !== peg$FAILED) {
                    peg$reportedPos = s4;
                    s5 = peg$c14(s8);
                    s4 = s5;
                  } else {
                    peg$currPos = s4;
                    s4 = peg$c4;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$c4;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c4;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c4;
            }
            if (s4 === peg$FAILED) {
              s4 = peg$c0;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseIfTagClose();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c15(s1, s2, s3, s4);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c4;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c4;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c4;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c4;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c4;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c10); }
      }

      return s0;
    }

    function peg$parseIfTagOpen() {
      var s0, s1, s2, s3, s4;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parseOpenToken();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c16) {
          s2 = peg$c16;
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c17); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseAttributeMap();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseCloseToken();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c18(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c4;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c4;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c4;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c4;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c10); }
      }

      return s0;
    }

    function peg$parseIfTagClose() {
      var s0, s1, s2, s3;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parseOpenToken();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c20) {
          s2 = peg$c20;
          peg$currPos += 3;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c21); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseCloseToken();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c4;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c4;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c4;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c19); }
      }

      return s0;
    }

    function peg$parseElseIfTag() {
      var s0, s1, s2, s3, s4;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parseOpenToken();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 6) === peg$c23) {
          s2 = peg$c23;
          peg$currPos += 6;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c24); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseAttributeMap();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseCloseToken();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c18(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c4;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c4;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c4;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c4;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c22); }
      }

      return s0;
    }

    function peg$parseElseTag() {
      var s0, s1, s2, s3;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parseOpenToken();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c12) {
          s2 = peg$c12;
          peg$currPos += 4;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c13); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseCloseToken();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c4;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c4;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c4;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c25); }
      }

      return s0;
    }

    function peg$parseFor() {
      var s0, s1, s2, s3;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parseForTagOpen();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseAny();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseForTagClose();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c27(s1, s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c4;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c4;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c4;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c26); }
      }

      return s0;
    }

    function peg$parseForTagOpen() {
      var s0, s1, s2, s3, s4;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parseOpenToken();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c28) {
          s2 = peg$c28;
          peg$currPos += 3;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c29); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseAttributeMap();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseCloseToken();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c30(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c4;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c4;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c4;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c4;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c26); }
      }

      return s0;
    }

    function peg$parseForTagClose() {
      var s0, s1, s2, s3;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parseOpenToken();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c32) {
          s2 = peg$c32;
          peg$currPos += 4;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c33); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseCloseToken();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c4;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c4;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c4;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c31); }
      }

      return s0;
    }

    function peg$parseWhen() {
      var s0, s1, s2, s3, s4, s5, s6;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parseWhenTagOpen();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseAny();
        if (s2 === peg$FAILED) {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parseWhenErrorTag();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseAny();
            if (s5 === peg$FAILED) {
              s5 = peg$c0;
            }
            if (s5 !== peg$FAILED) {
              peg$reportedPos = s3;
              s4 = peg$c14(s5);
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c4;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c4;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$c0;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$currPos;
            s5 = peg$parseWhenProgressTag();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseAny();
              if (s6 === peg$FAILED) {
                s6 = peg$c0;
              }
              if (s6 !== peg$FAILED) {
                peg$reportedPos = s4;
                s5 = peg$c14(s6);
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$c4;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c4;
            }
            if (s4 === peg$FAILED) {
              s4 = peg$c0;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseWhenTagClose();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c35(s1, s2, s3, s4);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c4;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c4;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c4;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c4;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c4;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c34); }
      }

      return s0;
    }

    function peg$parseWhenTagOpen() {
      var s0, s1, s2, s3, s4, s5, s6;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parseOpenToken();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c36) {
          s2 = peg$c36;
          peg$currPos += 4;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c37); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseAttributeMap();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseCloseToken();
            if (s4 !== peg$FAILED) {
              s5 = [];
              s6 = peg$parseS();
              while (s6 !== peg$FAILED) {
                s5.push(s6);
                s6 = peg$parseS();
              }
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c38(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c4;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c4;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c4;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c4;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c4;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c34); }
      }

      return s0;
    }

    function peg$parseWhenTagClose() {
      var s0, s1, s2, s3;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parseOpenToken();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c40) {
          s2 = peg$c40;
          peg$currPos += 5;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c41); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseCloseToken();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c4;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c4;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c4;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c39); }
      }

      return s0;
    }

    function peg$parseWhenErrorTag() {
      var s0, s1, s2, s3;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parseOpenToken();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c43) {
          s2 = peg$c43;
          peg$currPos += 5;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c44); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseCloseToken();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c4;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c4;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c4;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c42); }
      }

      return s0;
    }

    function peg$parseWhenProgressTag() {
      var s0, s1, s2, s3;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parseOpenToken();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 8) === peg$c46) {
          s2 = peg$c46;
          peg$currPos += 8;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c47); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseCloseToken();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c4;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c4;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c4;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c45); }
      }

      return s0;
    }

    function peg$parseWidget() {
      var s0, s1, s2, s3;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parseWidgetTagOpen();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseAny();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseAny();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseWidgetTagClose();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c49(s1, s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c4;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c4;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c4;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c48); }
      }

      return s0;
    }

    function peg$parseWidgetTagOpen() {
      var s0, s1, s2, s3, s4;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parseOpenToken();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 6) === peg$c50) {
          s2 = peg$c50;
          peg$currPos += 6;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c51); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseAttributeMap();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseCloseToken();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c52(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c4;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c4;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c4;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c4;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c48); }
      }

      return s0;
    }

    function peg$parseWidgetTagClose() {
      var s0, s1, s2, s3;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parseOpenToken();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 7) === peg$c54) {
          s2 = peg$c54;
          peg$currPos += 7;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c55); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseCloseToken();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c4;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c4;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c4;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c53); }
      }

      return s0;
    }

    function peg$parsePlaceholder() {
      var s0, s1, s2, s3, s4;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parseOpenToken();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 11) === peg$c57) {
          s2 = peg$c57;
          peg$currPos += 11;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c58); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseAttributeMap();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseCloseToken();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c59(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c4;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c4;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c4;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c4;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c56); }
      }

      return s0;
    }

    function peg$parseData() {
      var s0, s1, s2, s3, s4;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parseOpenToken();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c61) {
          s2 = peg$c61;
          peg$currPos += 4;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c62); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseAttributeMap();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseCloseToken();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c63(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c4;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c4;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c4;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c4;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c60); }
      }

      return s0;
    }

    function peg$parseAlias() {
      var s0, s1, s2, s3, s4;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parseOpenToken();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c65) {
          s2 = peg$c65;
          peg$currPos += 5;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c66); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseAttributeMap();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseCloseToken();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c67(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c4;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c4;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c4;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c4;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c64); }
      }

      return s0;
    }

    function peg$parseAttributeMap() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseAttribute();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseAttribute();
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseS();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseS();
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c68(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c4;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c4;
      }

      return s0;
    }

    function peg$parseAttribute() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseS();
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parseS();
        }
      } else {
        s1 = peg$c4;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseAttributeName();
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = [];
          s5 = peg$parseS();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parseS();
          }
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 61) {
              s5 = peg$c69;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c70); }
            }
            if (s5 !== peg$FAILED) {
              s6 = [];
              s7 = peg$parseS();
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$parseS();
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parseAttributeValue();
                if (s7 !== peg$FAILED) {
                  peg$reportedPos = s3;
                  s4 = peg$c71(s7);
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c4;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c4;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c4;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c4;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$c0;
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c72(s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c4;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c4;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c4;
      }

      return s0;
    }

    function peg$parseAttributeName() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      if (peg$c73.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c74); }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (peg$c73.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c74); }
          }
        }
      } else {
        s1 = peg$c4;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c75(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseAttributeValue() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 39) {
        s1 = peg$c76;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c77); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c78) {
          s4 = peg$c78;
          peg$currPos += 2;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c79); }
        }
        if (s4 !== peg$FAILED) {
          peg$reportedPos = s3;
          s4 = peg$c80();
        }
        s3 = s4;
        if (s3 === peg$FAILED) {
          if (peg$c81.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c82); }
          }
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          if (input.substr(peg$currPos, 2) === peg$c78) {
            s4 = peg$c78;
            peg$currPos += 2;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c79); }
          }
          if (s4 !== peg$FAILED) {
            peg$reportedPos = s3;
            s4 = peg$c80();
          }
          s3 = s4;
          if (s3 === peg$FAILED) {
            if (peg$c81.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c82); }
            }
          }
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 39) {
            s3 = peg$c76;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c77); }
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c83(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c4;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c4;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c4;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 34) {
          s1 = peg$c84;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c85); }
        }
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$currPos;
          if (input.substr(peg$currPos, 2) === peg$c86) {
            s4 = peg$c86;
            peg$currPos += 2;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c87); }
          }
          if (s4 !== peg$FAILED) {
            peg$reportedPos = s3;
            s4 = peg$c88();
          }
          s3 = s4;
          if (s3 === peg$FAILED) {
            if (peg$c89.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c90); }
            }
          }
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$currPos;
            if (input.substr(peg$currPos, 2) === peg$c86) {
              s4 = peg$c86;
              peg$currPos += 2;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c87); }
            }
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s3;
              s4 = peg$c88();
            }
            s3 = s4;
            if (s3 === peg$FAILED) {
              if (peg$c89.test(input.charAt(peg$currPos))) {
                s3 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c90); }
              }
            }
          }
          if (s2 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 34) {
              s3 = peg$c84;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c85); }
            }
            if (s3 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c83(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c4;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c4;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c4;
        }
      }

      return s0;
    }

    function peg$parseOpenToken() {
      var s0, s1, s2, s3;

      peg$silentFails++;
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 60) {
        s1 = peg$c92;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c93); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseS();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseS();
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c4;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c4;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c91); }
      }

      return s0;
    }

    function peg$parseCloseToken() {
      var s0, s1, s2;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseS();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseS();
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 62) {
          s2 = peg$c95;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c96); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c4;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c4;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c94); }
      }

      return s0;
    }

    function peg$parseS() {
      var s0, s1;

      peg$silentFails++;
      if (peg$c98.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c99); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c97); }
      }

      return s0;
    }


    	/**
    	 * Validates that the attributes provided in the given attribute map are correct according to the provided rules.
    	 */
    	function validate(attributes, rules) {
    		var required = rules.required || [],
    			optional = rules.optional || [],
    			type = rules.type ? ' ' + rules.type : '';

    		var i = 0,
    			permitted = {};

    		for (i = 0; i < required.length; ++i) {
    			permitted[required[i]] = true;
    		}
    		for (i = 0; i < optional.length; ++i) {
    			permitted[optional[i]] = true;
    		}

    		for (i = 0; i < required.length; ++i) {
    			if (!(required[i] in attributes)) {
    				error('Missing required attribute "' + required[i] + '" on' + type + ' node');
    			}
    		}

    		if (!rules.allowAnyAttribute) {
    			for (var name in attributes) {
    				if (!(name in permitted)) {
    					error('Invalid attribute "' + name + '" on' + type + ' node');
    				}
    			}
    		}
    	}

    	/**
    	 * Walks the widget tree, resolving constructor aliases for the given node and its children.
    	 */
    	function resolveAliases(node) {
    		for (var k in aliasMap) {
    			if (node.constructor.indexOf(k) === 0) {
    				node.constructor = node.constructor.replace(k, aliasMap[k]);
    			}
    		}

    		if (node.children && node.children.length) {
    			for (var i = 0, child; (child = node.children[i]); ++i) {
    				resolveAliases(child);
    			}
    		}
    	}

    	/**
    	 * A map of constructor names, where the key is the unexpanded source and the value is the expanded destination.
    	 * Aliases are currently resolved in the order in which they are received, not by longest to shortest.
    	 */
    	var aliasMap = {};


    peg$result = peg$startRuleFunction();

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail({ type: "end", description: "end of input" });
      }

      throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);
    }
  }

  return {
    SyntaxError: SyntaxError,
    parse:       parse
  };
});
