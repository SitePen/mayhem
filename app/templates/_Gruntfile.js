/* jshint node:true */

module.exports = function (grunt) {
	grunt.loadNpmTasks('grunt-ts');
	grunt.loadNpmTasks('grunt-contrib-clean');
	grunt.loadNpmTasks('grunt-contrib-watch');
	grunt.loadNpmTasks('intern');

	grunt.initConfig({
		all: [ 'src/app/**/*.ts' ],
		ignoreDefinitions: [ '<%= all %>', '!src/app/**/*.d.ts' ],

		clean: {
			app: {
				src: [
					'src/app/**/{*.js,*.js.map}'
				],
				filter: function (filepath) {
					var jsName = filepath.match(/(.*\.js)(?:\.map)?$/)[1];

					// Only clean .js and .js.map files if BOTH the JavaScript and the map file exist.
					// Since the only thing generating map files is grunt-ts, this targets only the
					// JavaScript files generated by that process (including JavaScript files
					// generated for TypeScript files that have been moved or deleted).
					return grunt.file.exists(jsName) && grunt.file.exists(jsName + '.map');
				}
			}
		},

		ts: {
			options: {
				target: 'es5',
				module: 'amd',
				sourceMap: true,
				noImplicitAny: true,
				fast: 'never'
			},
			app: {
				src: [ '<%= ignoreDefinitions %>' ]
			}
		},

		watch: {
			ts: {
				files: [ '<%= all %>' ],
				tasks: [ 'ts:app' ]
			},
			stylus: {
				files: [ 'src/app/resources/**/*.styl' ],
				tasks: [ 'stylus:app' ]
			}
		},

		intern: {
			remote: {
				options: {
					runType: 'runner',
					config: 'src/app/tests/intern-remote'
				}
			},
			local: {
				options: {
					runType: 'runner',
					config: 'src/app/tests/intern-local'
				}
			},
			client: {
				options: {
					config: 'src/app/tests/intern-local'
				}
			}
		}
	});

	grunt.registerTask('test', [ 'intern:client' ]);
	grunt.registerTask('build', [ 'ts:app' ]);
	grunt.registerTask('default', [ 'ts:app', 'watch' ]);
};
